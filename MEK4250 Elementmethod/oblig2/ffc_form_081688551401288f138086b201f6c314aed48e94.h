// This code conforms with the UFC specification version 1.6.0
// and was automatically generated by FFC version 1.6.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_081688551401288F138086B201F6C314AED48E94_H
#define __FFC_FORM_081688551401288F138086B201F6C314AED48E94_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2)), 7, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 36;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556535, -0.00446377291456791, -0.00257716049382716, 0.0153118474035067, 0.0118605059986902, 0.00684766633106896, -0.0117674809859715, -0.00994533662273069, -0.00770362462245253, -0.00444768974950885, 0.0147486959247558, 0.0130071271931385, 0.010993028889076, 0.00851516356235372, 0.0049162319749186, -0.0124038595664064, -0.0112197131274629, -0.0098948569055845, -0.00836268041368458, -0.00647770439437109, -0.00373990437582095, 0.00699112079973239, 0.00643089580074767, 0.00581696411916874, 0.00513008014823548, 0.00433570906437952, 0.00335842580006848, 0.0019389880397229, -0.00614657010405816, -0.00572214535859481, -0.00526360816984644, -0.00476111272986274, -0.00419890674905354, -0.0035487239041709, -0.0027488297162284, -0.00158703757662089};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556514, 0.00446377291456793, -0.00257716049382712, 0.0153118474035067, -0.0118605059986903, 0.00684766633106895, 0.0117674809859715, -0.00994533662273073, 0.00770362462245257, -0.00444768974950882, 0.0147486959247558, -0.0130071271931385, 0.010993028889076, -0.0085151635623537, 0.00491623197491859, 0.0124038595664064, -0.0112197131274628, 0.0098948569055845, -0.00836268041368457, 0.00647770439437107, -0.00373990437582095, 0.00699112079973241, -0.00643089580074764, 0.00581696411916877, -0.00513008014823547, 0.0043357090643795, -0.00335842580006846, 0.00193898803972294, 0.00614657010405816, -0.00572214535859479, 0.00526360816984648, -0.00476111272986275, 0.00419890674905356, -0.00354872390417088, 0.00274882971622841, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556508, 0.0, 0.00515432098765426, 0.0, 0.0, 0.0205429989932068, 0.0, 0.0, 0.0, 0.0177907589980352, 0.0, 0.0, 0.0, 0.0, 0.024581159874593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0224394262549257, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0135729162780604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481991, 0.07399973241905, -0.052554012345679, 0.0690445086299521, -0.0287155488472387, 0.00942957330835723, 0.0706691890906156, -0.0447268417514065, 0.0268995417144655, -0.0132944606173843, 0.0485477907523211, -0.0138587843307845, -0.00664162162048343, 0.0146227659984467, -0.0111785750858268, 0.0260481050894534, 0.00112197131274631, -0.0184044338443871, 0.0265933237155169, -0.0262994798411465, 0.0168295696911943, 0.0122344613995317, 0.00321544790037387, -0.0138152897830258, 0.0198790605744125, -0.0216785453218976, 0.0193109483503938, -0.0118763017433029, 0.0, 0.0114442907171896, -0.0195505446308583, 0.0244857226107226, -0.026393128136908, 0.0253480278869349, -0.0212052578109048, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.0468228395394874, 0.0920640432098766, -0.030074601918568, 0.0376595369773985, -0.00151546713884317, -0.0252068445163978, 0.0944535248650602, -0.109534597090828, 0.0734962502869654, -0.010446992946702, 0.0623258178004556, -0.0455752656026277, 0.0165995003968503, -0.00158021742050958, 0.0, 0.0336591393823886, -0.0160296681870469, -0.013547542270169, 0.0312873122248122, -0.0252443545367914, 0.0, 0.0209004113524298, -0.00799832566385705, -0.0160315004632359, 0.035769599781131, -0.041980322500856, 0.0288424470908785, 0.0, 0.0, 0.0195505446308583, -0.0448904914529915, 0.0659828203422699, -0.0760440836608047, 0.0706841927030161, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205069, 0.117220815070885, -0.146697530864198, 0.0824266867397792, -0.013780546928806, -0.0597907914686163, 0.0432117334566822, -0.0338032752969318, 0.103641113773105, -0.110827679004154, 0.0122905799372965, -0.00232270128448912, 0.0407658154636569, -0.0281304510542043, 0.00658423925212309, 0.0, 0.0112197131274629, 0.0249350394020729, -0.0244190268079589, 0.00272063584563577, 0.00747980875164186, 0.0, 0.0, 0.0319933026554282, -0.0269329207782362, -0.00650356359656924, 0.035263470900719, -0.0322356761603936, 0.0, 0.0, 0.0, 0.0299269943019943, -0.079179384410724, 0.121670533857288, -0.131943826378964, 0.0888741042907711};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205076, -0.0684333808654046, 0.174864969135803, -0.0397229483869663, 0.0808361535894336, 0.0494631635594633, -0.00990268891715632, 0.0694543180538244, -0.081835225497529, 0.120063318921167, 0.0, 0.0243109401109851, 0.00824477166680707, -0.0236194417860524, 0.0378959548066642, 0.0, 0.0, 0.0302782621310885, -0.00351232577374755, -0.016777254381421, 0.0140246414093287, 0.0, 0.0, 0.0, 0.0423231612229426, -0.045524945175985, 0.0117544903002397, 0.00848307267378769, 0.0, 0.0, 0.0, 0.0, 0.039589692205362, -0.106461717125127, 0.148436804676334, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.019516365403582, 0.0563183804251178, -0.0865817901234568, 0.0181671304234229, 0.00029165178685305, -0.0446641842864599, 0.0, 0.00108692203527105, 0.0930328438012032, -0.135277820468667, 0.0, 0.0, 0.0407658154636569, 0.0192604890100857, -0.0656960760934063, 0.0, 0.0, 0.0, 0.0491725608324653, -0.0272063584563586, -0.00560985656373146, 0.0, 0.0, 0.0, 0.0, 0.0455249451759849, -0.0470179612009587, 0.0186627598823332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425846868500507, -0.0989578697842226, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481993, -0.00851324355263416, 0.0903626543209878, 0.0, 0.024766097566937, 0.0711848592162147, 0.0, 0.0, 0.0193643023296622, 0.0867177979576364, 0.0, 0.0, 0.0, 0.0473909400642899, 0.0261906405806675, 0.0, 0.0, 0.0, 0.0, 0.0498783238366572, -0.0145856270657017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.035263470900719, -0.0220559889518482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0329859565947409, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481979, -0.07399973241905, -0.0525540123456792, 0.0690445086299523, 0.0287155488472386, 0.00942957330835727, -0.0706691890906157, -0.0447268417514065, -0.0268995417144655, -0.0132944606173843, 0.0485477907523211, 0.0138587843307845, -0.00664162162048346, -0.0146227659984466, -0.0111785750858268, -0.0260481050894534, 0.0011219713127463, 0.0184044338443871, 0.026593323715517, 0.0262994798411465, 0.0168295696911943, 0.0122344613995317, -0.00321544790037381, -0.0138152897830258, -0.0198790605744125, -0.0216785453218975, -0.0193109483503938, -0.0118763017433029, 0.0, 0.0114442907171896, 0.0195505446308583, 0.0244857226107226, 0.026393128136908, 0.0253480278869349, 0.0212052578109048, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035825, 0.0468228395394876, 0.0920640432098768, -0.0300746019185683, -0.0376595369773984, -0.00151546713884301, 0.025206844516398, 0.0944535248650602, 0.109534597090828, 0.0734962502869655, -0.010446992946702, -0.0623258178004555, -0.0455752656026276, -0.0165995003968502, -0.00158021742050955, 0.0, 0.0336591393823886, 0.0160296681870468, -0.0135475422701691, -0.0312873122248123, -0.0252443545367915, 0.0, -0.0209004113524299, -0.0079983256638571, 0.0160315004632358, 0.0357695997811309, 0.0419803225008559, 0.0288424470908784, 0.0, 0.0, -0.0195505446308584, -0.0448904914529915, -0.06598282034227, -0.0760440836608048, -0.0706841927030161, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205075, -0.117220815070885, -0.146697530864198, 0.0824266867397795, 0.0137805469288058, -0.0597907914686168, -0.0432117334566823, -0.0338032752969318, -0.103641113773105, -0.110827679004154, 0.0122905799372965, 0.00232270128448907, 0.040765815463657, 0.0281304510542041, 0.00658423925212304, 0.0, 0.0112197131274629, -0.0249350394020729, -0.0244190268079588, -0.00272063584563579, 0.00747980875164197, 0.0, 0.0, 0.0319933026554283, 0.0269329207782364, -0.00650356359656912, -0.0352634709007189, -0.0322356761603934, 0.0, 0.0, 0.0, 0.0299269943019944, 0.0791793844107241, 0.121670533857288, 0.131943826378963, 0.0888741042907711};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205073, 0.0684333808654049, 0.174864969135803, -0.0397229483869663, -0.0808361535894333, 0.0494631635594635, 0.00990268891715634, 0.0694543180538245, 0.0818352254975289, 0.120063318921167, 0.0, -0.0243109401109851, 0.00824477166680698, 0.0236194417860526, 0.0378959548066643, 0.0, 0.0, -0.0302782621310886, -0.00351232577374768, 0.016777254381421, 0.0140246414093285, 0.0, 0.0, 0.0, -0.0423231612229427, -0.0455249451759851, -0.0117544903002399, 0.00848307267378759, 0.0, 0.0, 0.0, 0.0, -0.039589692205362, -0.106461717125127, -0.148436804676334, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.0563183804251178, -0.0865817901234568, 0.0181671304234229, -0.000291651786853125, -0.0446641842864603, 0.0, 0.00108692203527107, -0.0930328438012031, -0.135277820468667, 0.0, 0.0, 0.0407658154636569, -0.0192604890100856, -0.0656960760934063, 0.0, 0.0, 0.0, 0.0491725608324653, 0.0272063584563585, -0.00560985656373141, 0.0, 0.0, 0.0, 0.0, 0.045524945175985, 0.0470179612009588, 0.0186627598823332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425846868500507, 0.0989578697842225, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481992, 0.00851324355263412, 0.0903626543209877, 0.0, -0.024766097566937, 0.0711848592162147, 0.0, 0.0, -0.0193643023296623, 0.0867177979576364, 0.0, 0.0, 0.0, -0.0473909400642899, 0.0261906405806675, 0.0, 0.0, 0.0, 0.0, -0.0498783238366572, -0.0145856270657017, 0.0, 0.0, 0.0, 0.0, 0.0, -0.035263470900719, -0.0220559889518483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0329859565947408, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481989, -0.0825129759716842, -0.0378086419753086, 0.0370716141541869, 0.0534816464141758, 0.0380269995024525, -0.0440476747289097, -0.0522266037947772, -0.0482002742770939, -0.0300644383614339, -0.0171190220555201, 0.0138587843307845, 0.0300672427055383, 0.0327681740658432, 0.0216548313180938, 0.0421731225257819, 0.0134636557529554, -0.00554111986712732, -0.015721839177727, -0.0178784641284641, -0.0119676940026271, -0.034955603998662, -0.017684963452056, -0.00508984360427266, 0.00320630009264718, 0.00758749086266416, 0.00839606450017114, 0.00557459061420343, 0.0430259907284071, 0.028610726792974, 0.0172947125580669, 0.00884206649831655, 0.00299921910646676, -0.000506960557738677, -0.00196344979730598, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035832, 0.103141219964605, -0.00548225308641984, -0.0304511227563592, -0.0373678851905456, -0.00117869666354457, 0.153105859167203, 0.0584220593958226, 0.00719846890950483, -0.00707255583118618, -0.0371351093819744, -0.0623258178004555, -0.0306561549674531, 0.00266098861323558, 0.0117638407971266, -0.0372115786992194, 0.0269273115059109, 0.0290908793024184, 0.00953345567160042, -0.00719025187775195, -0.00953675615834336, 0.0629200871975914, -0.00160772395018692, -0.0196322539021946, -0.014748980426177, -0.00325178179828463, 0.00503763870010283, 0.0055745906142034, -0.129077972185221, -0.0514993082273532, -0.0127830484124842, 0.00204047688422678, 0.00419890674905365, 0.00152088167321606, -0.00117806987838366, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205075, -0.185654195936289, -0.0281674382716049, -0.0219323388013347, 0.0946167005182399, 0.0335507586016103, -0.15670683695526, 0.00374988102168536, -0.027236312189764, -0.0268562687060505, 0.0395054355127387, 0.0266336413954741, -0.0104041166271612, 0.00451100926815165, 0.0159484906329205, -0.0124038595664062, -0.0291712541314034, 0.00969695976747278, 0.0145510639198111, -0.00239675062591724, -0.00953675615834347, -0.0349556039986617, 0.0482317185056075, 0.0189051333872984, -0.00769512022235322, -0.00867141812875899, 0.00167921290003412, 0.00557459061420338, 0.215129953642036, 0.028610726792974, -0.0112791603639569, -0.00612143065268053, 0.00179953146387996, 0.00253480278869353, -0.000392689959461142, -0.00158703757662088};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205074, 0.185654195936289, -0.0281674382716049, -0.0219323388013343, -0.0946167005182399, 0.0335507586016104, 0.15670683695526, 0.0037498810216853, 0.027236312189764, -0.0268562687060504, 0.0395054355127387, -0.0266336413954742, -0.0104041166271613, -0.00451100926815163, 0.0159484906329204, 0.0124038595664061, -0.0291712541314034, -0.00969695976747277, 0.0145510639198112, 0.00239675062591722, -0.00953675615834343, -0.0349556039986622, -0.0482317185056074, 0.0189051333872985, 0.00769512022235318, -0.00867141812875902, -0.00167921290003412, 0.00557459061420343, -0.215129953642036, 0.028610726792974, 0.0112791603639569, -0.00612143065268073, -0.00179953146387996, 0.00253480278869344, 0.00039268995946115, -0.00158703757662097};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.103141219964605, -0.00548225308641981, -0.0304511227563594, 0.0373678851905457, -0.0011786966635447, -0.153105859167203, 0.0584220593958227, -0.00719846890950486, -0.00707255583118621, -0.0371351093819744, 0.0623258178004556, -0.030656154967453, -0.00266098861323555, 0.0117638407971266, 0.0372115786992195, 0.0269273115059109, -0.0290908793024184, 0.00953345567160042, 0.00719025187775191, -0.00953675615834339, 0.0629200871975917, 0.00160772395018689, -0.0196322539021946, 0.014748980426177, -0.00325178179828464, -0.00503763870010279, 0.00557459061420338, 0.129077972185222, -0.0514993082273533, 0.0127830484124842, 0.00204047688422688, -0.00419890674905363, 0.00152088167321612, 0.00117806987838363, -0.00158703757662089};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481992, 0.0825129759716841, -0.0378086419753087, 0.0370716141541869, -0.0534816464141758, 0.0380269995024526, 0.0440476747289096, -0.0522266037947772, 0.0482002742770939, -0.0300644383614339, -0.0171190220555201, -0.0138587843307845, 0.0300672427055383, -0.0327681740658432, 0.0216548313180938, -0.0421731225257819, 0.0134636557529554, 0.00554111986712731, -0.015721839177727, 0.0178784641284641, -0.0119676940026271, -0.034955603998662, 0.0176849634520561, -0.00508984360427268, -0.00320630009264717, 0.00758749086266414, -0.00839606450017119, 0.00557459061420336, -0.0430259907284071, 0.028610726792974, -0.0172947125580669, 0.00884206649831649, -0.00299921910646679, -0.000506960557738727, 0.00196344979730601, -0.0015870375766209};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, -0.169610006164017, -0.0979243827160495, 0.17912978857914, 0.166897735026651, 0.0557355136618973, 0.0144039111522275, 0.00999968272449431, 0.00942957330835719, 0.00641633931076675, -0.094637465517183, -0.000774233761496396, -0.0297727865745809, -0.0681719939962245, -0.0575901459919035, 0.104192420357814, 0.0, 0.00831167980069093, 0.0491725608324653, 0.0734571678321678, 0.0549765943245681, -0.0734067683971902, 0.0128617916014953, 0.0189051333872985, -0.00897764025941208, -0.0390213815794156, -0.0520555999010614, -0.0373255197646663, 0.0, -0.0686657443031377, -0.0782021785234332, -0.0571333527583528, -0.026393128136908, 0.0, 0.0141368385406032, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.037428645979474, -0.0504245964271405, -0.0582253086419751, -0.298628089473106, -0.0288370704250942, 0.095095562962406, 0.183199744967392, -0.0515744505736147, -0.0244579557685518, -0.0334184339102437, -0.0583802547021579, -0.0400278854693609, 0.0730578378253177, 0.0291695037508008, -0.0191674520450695, -0.130240525447267, -0.0100977418147166, -0.0718366611345433, -0.0496743216572864, 0.0190444509194511, 0.0403909672588661, 0.183516920992976, -0.0160772395018689, 0.0487170744980384, 0.0775924622420617, 0.0325178179828464, -0.0260277999505307, -0.037325519764666, 0.0, 0.171664360757844, 0.0977527231542916, 0.00816190753690784, -0.0263931281369079, -0.0152088167321609, 0.00706841927030164, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, 0.0, -0.137623456790123, 0.100907584528028, 0.0, -0.00446220879770451, 0.0, 0.172603219201053, 0.0, 0.0534694942563901, 0.20893985893404, 0.0, -0.073286859260507, 0.0, -0.0400907012240387, 0.0, 0.0179515410039407, 0.0, -0.0521831257813917, 0.0, 0.0403909672588665, -0.244689227990634, 0.0, -0.107613836204622, 0.0, 0.0563642178369336, 0.0, -0.0373255197646662, 0.0, -0.228885814343792, 0.0, 0.048971445221445, 0.0, -0.0202784223095479, 0.0, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794734, 0.0504245964271398, -0.0582253086419752, -0.298628089473106, 0.0288370704250943, 0.0950955629624062, -0.183199744967392, -0.0515744505736146, 0.0244579557685516, -0.033418433910244, -0.0583802547021577, 0.0400278854693607, 0.0730578378253179, -0.0291695037508011, -0.0191674520450693, 0.130240525447268, -0.0100977418147166, 0.0718366611345434, -0.0496743216572865, -0.0190444509194507, 0.0403909672588661, 0.183516920992976, 0.0160772395018692, 0.0487170744980381, -0.0775924622420615, 0.0325178179828463, 0.0260277999505306, -0.0373255197646663, 0.0, 0.171664360757844, -0.0977527231542917, 0.00816190753690777, 0.026393128136908, -0.0152088167321609, -0.00706841927030159, 0.0126963006129674};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, 0.169610006164017, -0.0979243827160495, 0.179129788579139, -0.166897735026651, 0.0557355136618974, -0.0144039111522274, 0.00999968272449436, -0.00942957330835727, 0.00641633931076692, -0.0946374655171832, 0.000774233761496393, -0.029772786574581, 0.0681719939962246, -0.0575901459919036, -0.104192420357814, 0.0, -0.008311679800691, 0.0491725608324653, -0.0734571678321679, 0.0549765943245681, -0.0734067683971902, -0.0128617916014954, 0.0189051333872986, 0.00897764025941205, -0.0390213815794155, 0.0520555999010615, -0.0373255197646662, 0.0, -0.0686657443031377, 0.0782021785234333, -0.0571333527583528, 0.026393128136908, 0.0, -0.0141368385406032, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794735, -0.0756368946407107, -0.0145563271604938, 0.00249445055036625, -0.262085586960811, -0.174236624657547, -0.0450122223507107, 0.0294555871558472, 0.114922924695604, 0.147770238672206, 0.0313409788401059, 0.0329049348635946, -0.0849669524551501, -0.0475176538077774, 0.0048869686893537, 0.0, -0.100977418147166, -0.026716113645078, -0.0366285402119385, -0.0884206649831648, -0.0813429201741057, 0.0, 0.10450205676215, 0.0239949769915712, 0.0121839403520594, 0.0747909813605466, 0.130978606202671, 0.105190101154968, 0.0, 0.0, 0.0977527231542916, 0.134671474358974, 0.0923759484791781, 0.0152088167321609, -0.0424105156218096, -0.0444370521453856};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897367, 0.146689735060772, 0.0846913580246916, 0.027580151368202, 0.169960078788608, -0.116354199215622, 0.00900244447014198, -0.123909112020907, 0.00589348331772356, 0.0622190478619808, -0.0208939858934041, 0.212914284411494, 0.130542218057778, -0.103144987198749, -0.0388616432303089, 0.0, 0.067318278764777, 0.0, 0.0501760824821074, 0.0, -0.0448788525098514, 0.0, -0.209004113524299, -0.0159966513277143, -0.116709323372357, -0.110560581141678, 0.0436595354008901, 0.105190101154968, 0.0, 0.0, -0.195505446308583, -0.0897809829059831, 0.0527862562738159, 0.0608352669286438, -0.0141368385406031, -0.0444370521453853};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897357, -0.146689735060772, 0.084691358024691, 0.0275801513682018, -0.169960078788608, -0.116354199215622, -0.00900244447014219, -0.123909112020908, -0.00589348331772321, 0.0622190478619813, -0.020893985893404, -0.212914284411494, 0.130542218057778, 0.103144987198749, -0.0388616432303089, 0.0, 0.0673182787647772, 0.0, 0.0501760824821075, 0.0, -0.0448788525098515, 0.0, 0.209004113524299, -0.015996651327714, 0.116709323372357, -0.110560581141678, -0.0436595354008903, 0.105190101154969, 0.0, 0.0, 0.195505446308583, -0.0897809829059828, -0.0527862562738161, 0.0608352669286439, 0.0141368385406032, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794733, 0.0756368946407103, -0.0145563271604936, 0.00249445055036627, 0.262085586960811, -0.174236624657547, 0.0450122223507106, 0.0294555871558474, -0.114922924695604, 0.147770238672206, 0.0313409788401059, -0.0329049348635945, -0.0849669524551501, 0.0475176538077774, 0.00488696868935361, 0.0, -0.100977418147166, 0.0267161136450782, -0.0366285402119385, 0.0884206649831649, -0.0813429201741057, 0.0, -0.10450205676215, 0.023994976991571, -0.0121839403520593, 0.0747909813605465, -0.130978606202671, 0.105190101154968, 0.0, 0.0, -0.0977527231542916, 0.134671474358974, -0.0923759484791779, 0.0152088167321608, 0.0424105156218096, -0.0444370521453856};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, -0.119185409736877, 0.0688117283950617, 0.0134919966875161, 0.067711823181047, 0.0737246698840908, 0.0864234669133645, 0.0995620584308344, 0.0565774398501438, -0.109855506381311, -0.0491623197491858, -0.0046454025689783, 0.0778672879642883, 0.187029485387411, 0.0845708952828256, 0.0, -0.0448788525098514, 0.0498700788041457, -0.000669014433094749, -0.0126963006129674, 0.00373990437582073, 0.0, 0.0, -0.127973210621713, -0.0538658415564726, -0.0650356359656927, -0.164562864203355, -0.15948176626721, 0.0, 0.0, 0.0, -0.119707977207977, -0.158358768821448, -0.0608352669286438, 0.0659719131894815, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897362, 0.0, -0.169382716049382, -0.191837366854591, 0.0, 0.0798987952645629, 0.0, -0.131517566267805, 0.0, 0.045206026962221, 0.0737434796237789, 0.0, -0.237266206855891, 0.0, 0.115004712270417, 0.0, 0.0673182787647772, 0.0, 0.0501760824821075, 0.0, -0.0448788525098514, 0.0, 0.0, 0.191959815932569, 0.0, 0.143078399124524, 0.0, -0.15948176626721, 0.0, 0.0, 0.0, 0.179561965811966, 0.0, -0.121670533857288, 0.0, 0.0888741042907708};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, 0.119185409736877, 0.0688117283950615, 0.013491996687516, -0.0677118231810468, 0.0737246698840904, -0.0864234669133643, 0.0995620584308345, -0.0565774398501435, -0.109855506381311, -0.0491623197491857, 0.00464540256897794, 0.0778672879642884, -0.187029485387412, 0.0845708952828258, 0.0, -0.0448788525098514, -0.049870078804146, -0.000669014433094727, 0.0126963006129673, 0.00373990437582091, 0.0, 0.0, -0.127973210621713, 0.0538658415564726, -0.0650356359656925, 0.164562864203355, -0.15948176626721, 0.0, 0.0, 0.0, -0.119707977207977, 0.158358768821448, -0.0608352669286437, -0.0659719131894816, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794732, -0.0252122982135702, 0.0727816358024687, 0.0397229483869665, -0.233248516535716, -0.207534805402684, -0.0297080667514691, -0.0694543180538244, -0.163838836232707, -0.0733990330246811, 0.0, 0.0729328203329554, -0.00824477166680684, -0.0766871575585781, -0.0172653384833448, 0.0, 0.0, 0.0908347863932656, 0.00351232577374768, 0.0720968499093499, 0.115002059556494, 0.0, 0.0, 0.0, 0.126969483668828, 0.045524945175985, 0.0940359224019173, 0.135729162780604, 0.0, 0.0, 0.0, 0.0, 0.118769076616086, 0.106461717125127, -0.0494789348921112, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794729, 0.0252122982135703, 0.0727816358024692, 0.0397229483869665, 0.233248516535717, -0.207534805402684, 0.0297080667514689, -0.0694543180538244, 0.163838836232707, -0.0733990330246812, 0.0, -0.0729328203329553, -0.00824477166680688, 0.0766871575585783, -0.017265338483345, 0.0, 0.0, -0.0908347863932656, 0.00351232577374754, -0.0720968499093499, 0.115002059556494, 0.0, 0.0, 0.0, -0.126969483668828, 0.0455249451759847, -0.0940359224019174, 0.135729162780604, 0.0, 0.0, 0.0, 0.0, -0.118769076616086, 0.106461717125127, 0.0494789348921112, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, 0.0, 0.195848765432099, -0.036334260846846, 0.0, 0.248452418151448, 0.0, -0.00217384407054227, 0.0, -0.0208044941288498, 0.0, 0.0, -0.0815316309273139, 0.0, -0.10564046088962, 0.0, 0.0, 0.0, -0.0983451216649306, 0.0, -0.109953188649136, 0.0, 0.0, 0.0, 0.0, -0.0910498903519698, 0.0, -0.0576848941817567, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0851693737001013, 0.0, 0.0888741042907709};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 36; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 36; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 7)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[128];
    for (unsigned int r = 0; r < 128; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 36; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
      y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 22:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 23:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 24:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 25:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 26:
      {
        y[0] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 27:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 28:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 29:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 30:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 31:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 32:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 33:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 34:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 35:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
    y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[28] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[29] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[30] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[31] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[32] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[33] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[34] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[35] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Discontinuous Lagrange', Domain(Cell('triangle', 2)), 7, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 72;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556535, -0.00446377291456791, -0.00257716049382716, 0.0153118474035067, 0.0118605059986902, 0.00684766633106896, -0.0117674809859715, -0.00994533662273069, -0.00770362462245253, -0.00444768974950885, 0.0147486959247558, 0.0130071271931385, 0.010993028889076, 0.00851516356235372, 0.0049162319749186, -0.0124038595664064, -0.0112197131274629, -0.0098948569055845, -0.00836268041368458, -0.00647770439437109, -0.00373990437582095, 0.00699112079973239, 0.00643089580074767, 0.00581696411916874, 0.00513008014823548, 0.00433570906437952, 0.00335842580006848, 0.0019389880397229, -0.00614657010405816, -0.00572214535859481, -0.00526360816984644, -0.00476111272986274, -0.00419890674905354, -0.0035487239041709, -0.0027488297162284, -0.00158703757662089};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556514, 0.00446377291456793, -0.00257716049382712, 0.0153118474035067, -0.0118605059986903, 0.00684766633106895, 0.0117674809859715, -0.00994533662273073, 0.00770362462245257, -0.00444768974950882, 0.0147486959247558, -0.0130071271931385, 0.010993028889076, -0.0085151635623537, 0.00491623197491859, 0.0124038595664064, -0.0112197131274628, 0.0098948569055845, -0.00836268041368457, 0.00647770439437107, -0.00373990437582095, 0.00699112079973241, -0.00643089580074764, 0.00581696411916877, -0.00513008014823547, 0.0043357090643795, -0.00335842580006846, 0.00193898803972294, 0.00614657010405816, -0.00572214535859479, 0.00526360816984648, -0.00476111272986275, 0.00419890674905356, -0.00354872390417088, 0.00274882971622841, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556508, 0.0, 0.00515432098765426, 0.0, 0.0, 0.0205429989932068, 0.0, 0.0, 0.0, 0.0177907589980352, 0.0, 0.0, 0.0, 0.0, 0.024581159874593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0224394262549257, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0135729162780604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481991, 0.07399973241905, -0.052554012345679, 0.0690445086299521, -0.0287155488472387, 0.00942957330835723, 0.0706691890906156, -0.0447268417514065, 0.0268995417144655, -0.0132944606173843, 0.0485477907523211, -0.0138587843307845, -0.00664162162048343, 0.0146227659984467, -0.0111785750858268, 0.0260481050894534, 0.00112197131274631, -0.0184044338443871, 0.0265933237155169, -0.0262994798411465, 0.0168295696911943, 0.0122344613995317, 0.00321544790037387, -0.0138152897830258, 0.0198790605744125, -0.0216785453218976, 0.0193109483503938, -0.0118763017433029, 0.0, 0.0114442907171896, -0.0195505446308583, 0.0244857226107226, -0.026393128136908, 0.0253480278869349, -0.0212052578109048, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.0468228395394874, 0.0920640432098766, -0.030074601918568, 0.0376595369773985, -0.00151546713884317, -0.0252068445163978, 0.0944535248650602, -0.109534597090828, 0.0734962502869654, -0.010446992946702, 0.0623258178004556, -0.0455752656026277, 0.0165995003968503, -0.00158021742050958, 0.0, 0.0336591393823886, -0.0160296681870469, -0.013547542270169, 0.0312873122248122, -0.0252443545367914, 0.0, 0.0209004113524298, -0.00799832566385705, -0.0160315004632359, 0.035769599781131, -0.041980322500856, 0.0288424470908785, 0.0, 0.0, 0.0195505446308583, -0.0448904914529915, 0.0659828203422699, -0.0760440836608047, 0.0706841927030161, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205069, 0.117220815070885, -0.146697530864198, 0.0824266867397792, -0.013780546928806, -0.0597907914686163, 0.0432117334566822, -0.0338032752969318, 0.103641113773105, -0.110827679004154, 0.0122905799372965, -0.00232270128448912, 0.0407658154636569, -0.0281304510542043, 0.00658423925212309, 0.0, 0.0112197131274629, 0.0249350394020729, -0.0244190268079589, 0.00272063584563577, 0.00747980875164186, 0.0, 0.0, 0.0319933026554282, -0.0269329207782362, -0.00650356359656924, 0.035263470900719, -0.0322356761603936, 0.0, 0.0, 0.0, 0.0299269943019943, -0.079179384410724, 0.121670533857288, -0.131943826378964, 0.0888741042907711};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205076, -0.0684333808654046, 0.174864969135803, -0.0397229483869663, 0.0808361535894336, 0.0494631635594633, -0.00990268891715632, 0.0694543180538244, -0.081835225497529, 0.120063318921167, 0.0, 0.0243109401109851, 0.00824477166680707, -0.0236194417860524, 0.0378959548066642, 0.0, 0.0, 0.0302782621310885, -0.00351232577374755, -0.016777254381421, 0.0140246414093287, 0.0, 0.0, 0.0, 0.0423231612229426, -0.045524945175985, 0.0117544903002397, 0.00848307267378769, 0.0, 0.0, 0.0, 0.0, 0.039589692205362, -0.106461717125127, 0.148436804676334, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.019516365403582, 0.0563183804251178, -0.0865817901234568, 0.0181671304234229, 0.00029165178685305, -0.0446641842864599, 0.0, 0.00108692203527105, 0.0930328438012032, -0.135277820468667, 0.0, 0.0, 0.0407658154636569, 0.0192604890100857, -0.0656960760934063, 0.0, 0.0, 0.0, 0.0491725608324653, -0.0272063584563586, -0.00560985656373146, 0.0, 0.0, 0.0, 0.0, 0.0455249451759849, -0.0470179612009587, 0.0186627598823332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425846868500507, -0.0989578697842226, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481993, -0.00851324355263416, 0.0903626543209878, 0.0, 0.024766097566937, 0.0711848592162147, 0.0, 0.0, 0.0193643023296622, 0.0867177979576364, 0.0, 0.0, 0.0, 0.0473909400642899, 0.0261906405806675, 0.0, 0.0, 0.0, 0.0, 0.0498783238366572, -0.0145856270657017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.035263470900719, -0.0220559889518482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0329859565947409, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481979, -0.07399973241905, -0.0525540123456792, 0.0690445086299523, 0.0287155488472386, 0.00942957330835727, -0.0706691890906157, -0.0447268417514065, -0.0268995417144655, -0.0132944606173843, 0.0485477907523211, 0.0138587843307845, -0.00664162162048346, -0.0146227659984466, -0.0111785750858268, -0.0260481050894534, 0.0011219713127463, 0.0184044338443871, 0.026593323715517, 0.0262994798411465, 0.0168295696911943, 0.0122344613995317, -0.00321544790037381, -0.0138152897830258, -0.0198790605744125, -0.0216785453218975, -0.0193109483503938, -0.0118763017433029, 0.0, 0.0114442907171896, 0.0195505446308583, 0.0244857226107226, 0.026393128136908, 0.0253480278869349, 0.0212052578109048, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035825, 0.0468228395394876, 0.0920640432098768, -0.0300746019185683, -0.0376595369773984, -0.00151546713884301, 0.025206844516398, 0.0944535248650602, 0.109534597090828, 0.0734962502869655, -0.010446992946702, -0.0623258178004555, -0.0455752656026276, -0.0165995003968502, -0.00158021742050955, 0.0, 0.0336591393823886, 0.0160296681870468, -0.0135475422701691, -0.0312873122248123, -0.0252443545367915, 0.0, -0.0209004113524299, -0.0079983256638571, 0.0160315004632358, 0.0357695997811309, 0.0419803225008559, 0.0288424470908784, 0.0, 0.0, -0.0195505446308584, -0.0448904914529915, -0.06598282034227, -0.0760440836608048, -0.0706841927030161, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205075, -0.117220815070885, -0.146697530864198, 0.0824266867397795, 0.0137805469288058, -0.0597907914686168, -0.0432117334566823, -0.0338032752969318, -0.103641113773105, -0.110827679004154, 0.0122905799372965, 0.00232270128448907, 0.040765815463657, 0.0281304510542041, 0.00658423925212304, 0.0, 0.0112197131274629, -0.0249350394020729, -0.0244190268079588, -0.00272063584563579, 0.00747980875164197, 0.0, 0.0, 0.0319933026554283, 0.0269329207782364, -0.00650356359656912, -0.0352634709007189, -0.0322356761603934, 0.0, 0.0, 0.0, 0.0299269943019944, 0.0791793844107241, 0.121670533857288, 0.131943826378963, 0.0888741042907711};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205073, 0.0684333808654049, 0.174864969135803, -0.0397229483869663, -0.0808361535894333, 0.0494631635594635, 0.00990268891715634, 0.0694543180538245, 0.0818352254975289, 0.120063318921167, 0.0, -0.0243109401109851, 0.00824477166680698, 0.0236194417860526, 0.0378959548066643, 0.0, 0.0, -0.0302782621310886, -0.00351232577374768, 0.016777254381421, 0.0140246414093285, 0.0, 0.0, 0.0, -0.0423231612229427, -0.0455249451759851, -0.0117544903002399, 0.00848307267378759, 0.0, 0.0, 0.0, 0.0, -0.039589692205362, -0.106461717125127, -0.148436804676334, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.0563183804251178, -0.0865817901234568, 0.0181671304234229, -0.000291651786853125, -0.0446641842864603, 0.0, 0.00108692203527107, -0.0930328438012031, -0.135277820468667, 0.0, 0.0, 0.0407658154636569, -0.0192604890100856, -0.0656960760934063, 0.0, 0.0, 0.0, 0.0491725608324653, 0.0272063584563585, -0.00560985656373141, 0.0, 0.0, 0.0, 0.0, 0.045524945175985, 0.0470179612009588, 0.0186627598823332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425846868500507, 0.0989578697842225, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481992, 0.00851324355263412, 0.0903626543209877, 0.0, -0.024766097566937, 0.0711848592162147, 0.0, 0.0, -0.0193643023296623, 0.0867177979576364, 0.0, 0.0, 0.0, -0.0473909400642899, 0.0261906405806675, 0.0, 0.0, 0.0, 0.0, -0.0498783238366572, -0.0145856270657017, 0.0, 0.0, 0.0, 0.0, 0.0, -0.035263470900719, -0.0220559889518483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0329859565947408, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481989, -0.0825129759716842, -0.0378086419753086, 0.0370716141541869, 0.0534816464141758, 0.0380269995024525, -0.0440476747289097, -0.0522266037947772, -0.0482002742770939, -0.0300644383614339, -0.0171190220555201, 0.0138587843307845, 0.0300672427055383, 0.0327681740658432, 0.0216548313180938, 0.0421731225257819, 0.0134636557529554, -0.00554111986712732, -0.015721839177727, -0.0178784641284641, -0.0119676940026271, -0.034955603998662, -0.017684963452056, -0.00508984360427266, 0.00320630009264718, 0.00758749086266416, 0.00839606450017114, 0.00557459061420343, 0.0430259907284071, 0.028610726792974, 0.0172947125580669, 0.00884206649831655, 0.00299921910646676, -0.000506960557738677, -0.00196344979730598, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035832, 0.103141219964605, -0.00548225308641984, -0.0304511227563592, -0.0373678851905456, -0.00117869666354457, 0.153105859167203, 0.0584220593958226, 0.00719846890950483, -0.00707255583118618, -0.0371351093819744, -0.0623258178004555, -0.0306561549674531, 0.00266098861323558, 0.0117638407971266, -0.0372115786992194, 0.0269273115059109, 0.0290908793024184, 0.00953345567160042, -0.00719025187775195, -0.00953675615834336, 0.0629200871975914, -0.00160772395018692, -0.0196322539021946, -0.014748980426177, -0.00325178179828463, 0.00503763870010283, 0.0055745906142034, -0.129077972185221, -0.0514993082273532, -0.0127830484124842, 0.00204047688422678, 0.00419890674905365, 0.00152088167321606, -0.00117806987838366, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205075, -0.185654195936289, -0.0281674382716049, -0.0219323388013347, 0.0946167005182399, 0.0335507586016103, -0.15670683695526, 0.00374988102168536, -0.027236312189764, -0.0268562687060505, 0.0395054355127387, 0.0266336413954741, -0.0104041166271612, 0.00451100926815165, 0.0159484906329205, -0.0124038595664062, -0.0291712541314034, 0.00969695976747278, 0.0145510639198111, -0.00239675062591724, -0.00953675615834347, -0.0349556039986617, 0.0482317185056075, 0.0189051333872984, -0.00769512022235322, -0.00867141812875899, 0.00167921290003412, 0.00557459061420338, 0.215129953642036, 0.028610726792974, -0.0112791603639569, -0.00612143065268053, 0.00179953146387996, 0.00253480278869353, -0.000392689959461142, -0.00158703757662088};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205074, 0.185654195936289, -0.0281674382716049, -0.0219323388013343, -0.0946167005182399, 0.0335507586016104, 0.15670683695526, 0.0037498810216853, 0.027236312189764, -0.0268562687060504, 0.0395054355127387, -0.0266336413954742, -0.0104041166271613, -0.00451100926815163, 0.0159484906329204, 0.0124038595664061, -0.0291712541314034, -0.00969695976747277, 0.0145510639198112, 0.00239675062591722, -0.00953675615834343, -0.0349556039986622, -0.0482317185056074, 0.0189051333872985, 0.00769512022235318, -0.00867141812875902, -0.00167921290003412, 0.00557459061420343, -0.215129953642036, 0.028610726792974, 0.0112791603639569, -0.00612143065268073, -0.00179953146387996, 0.00253480278869344, 0.00039268995946115, -0.00158703757662097};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.103141219964605, -0.00548225308641981, -0.0304511227563594, 0.0373678851905457, -0.0011786966635447, -0.153105859167203, 0.0584220593958227, -0.00719846890950486, -0.00707255583118621, -0.0371351093819744, 0.0623258178004556, -0.030656154967453, -0.00266098861323555, 0.0117638407971266, 0.0372115786992195, 0.0269273115059109, -0.0290908793024184, 0.00953345567160042, 0.00719025187775191, -0.00953675615834339, 0.0629200871975917, 0.00160772395018689, -0.0196322539021946, 0.014748980426177, -0.00325178179828464, -0.00503763870010279, 0.00557459061420338, 0.129077972185222, -0.0514993082273533, 0.0127830484124842, 0.00204047688422688, -0.00419890674905363, 0.00152088167321612, 0.00117806987838363, -0.00158703757662089};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481992, 0.0825129759716841, -0.0378086419753087, 0.0370716141541869, -0.0534816464141758, 0.0380269995024526, 0.0440476747289096, -0.0522266037947772, 0.0482002742770939, -0.0300644383614339, -0.0171190220555201, -0.0138587843307845, 0.0300672427055383, -0.0327681740658432, 0.0216548313180938, -0.0421731225257819, 0.0134636557529554, 0.00554111986712731, -0.015721839177727, 0.0178784641284641, -0.0119676940026271, -0.034955603998662, 0.0176849634520561, -0.00508984360427268, -0.00320630009264717, 0.00758749086266414, -0.00839606450017119, 0.00557459061420336, -0.0430259907284071, 0.028610726792974, -0.0172947125580669, 0.00884206649831649, -0.00299921910646679, -0.000506960557738727, 0.00196344979730601, -0.0015870375766209};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, -0.169610006164017, -0.0979243827160495, 0.17912978857914, 0.166897735026651, 0.0557355136618973, 0.0144039111522275, 0.00999968272449431, 0.00942957330835719, 0.00641633931076675, -0.094637465517183, -0.000774233761496396, -0.0297727865745809, -0.0681719939962245, -0.0575901459919035, 0.104192420357814, 0.0, 0.00831167980069093, 0.0491725608324653, 0.0734571678321678, 0.0549765943245681, -0.0734067683971902, 0.0128617916014953, 0.0189051333872985, -0.00897764025941208, -0.0390213815794156, -0.0520555999010614, -0.0373255197646663, 0.0, -0.0686657443031377, -0.0782021785234332, -0.0571333527583528, -0.026393128136908, 0.0, 0.0141368385406032, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.037428645979474, -0.0504245964271405, -0.0582253086419751, -0.298628089473106, -0.0288370704250942, 0.095095562962406, 0.183199744967392, -0.0515744505736147, -0.0244579557685518, -0.0334184339102437, -0.0583802547021579, -0.0400278854693609, 0.0730578378253177, 0.0291695037508008, -0.0191674520450695, -0.130240525447267, -0.0100977418147166, -0.0718366611345433, -0.0496743216572864, 0.0190444509194511, 0.0403909672588661, 0.183516920992976, -0.0160772395018689, 0.0487170744980384, 0.0775924622420617, 0.0325178179828464, -0.0260277999505307, -0.037325519764666, 0.0, 0.171664360757844, 0.0977527231542916, 0.00816190753690784, -0.0263931281369079, -0.0152088167321609, 0.00706841927030164, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, 0.0, -0.137623456790123, 0.100907584528028, 0.0, -0.00446220879770451, 0.0, 0.172603219201053, 0.0, 0.0534694942563901, 0.20893985893404, 0.0, -0.073286859260507, 0.0, -0.0400907012240387, 0.0, 0.0179515410039407, 0.0, -0.0521831257813917, 0.0, 0.0403909672588665, -0.244689227990634, 0.0, -0.107613836204622, 0.0, 0.0563642178369336, 0.0, -0.0373255197646662, 0.0, -0.228885814343792, 0.0, 0.048971445221445, 0.0, -0.0202784223095479, 0.0, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794734, 0.0504245964271398, -0.0582253086419752, -0.298628089473106, 0.0288370704250943, 0.0950955629624062, -0.183199744967392, -0.0515744505736146, 0.0244579557685516, -0.033418433910244, -0.0583802547021577, 0.0400278854693607, 0.0730578378253179, -0.0291695037508011, -0.0191674520450693, 0.130240525447268, -0.0100977418147166, 0.0718366611345434, -0.0496743216572865, -0.0190444509194507, 0.0403909672588661, 0.183516920992976, 0.0160772395018692, 0.0487170744980381, -0.0775924622420615, 0.0325178179828463, 0.0260277999505306, -0.0373255197646663, 0.0, 0.171664360757844, -0.0977527231542917, 0.00816190753690777, 0.026393128136908, -0.0152088167321609, -0.00706841927030159, 0.0126963006129674};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, 0.169610006164017, -0.0979243827160495, 0.179129788579139, -0.166897735026651, 0.0557355136618974, -0.0144039111522274, 0.00999968272449436, -0.00942957330835727, 0.00641633931076692, -0.0946374655171832, 0.000774233761496393, -0.029772786574581, 0.0681719939962246, -0.0575901459919036, -0.104192420357814, 0.0, -0.008311679800691, 0.0491725608324653, -0.0734571678321679, 0.0549765943245681, -0.0734067683971902, -0.0128617916014954, 0.0189051333872986, 0.00897764025941205, -0.0390213815794155, 0.0520555999010615, -0.0373255197646662, 0.0, -0.0686657443031377, 0.0782021785234333, -0.0571333527583528, 0.026393128136908, 0.0, -0.0141368385406032, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794735, -0.0756368946407107, -0.0145563271604938, 0.00249445055036625, -0.262085586960811, -0.174236624657547, -0.0450122223507107, 0.0294555871558472, 0.114922924695604, 0.147770238672206, 0.0313409788401059, 0.0329049348635946, -0.0849669524551501, -0.0475176538077774, 0.0048869686893537, 0.0, -0.100977418147166, -0.026716113645078, -0.0366285402119385, -0.0884206649831648, -0.0813429201741057, 0.0, 0.10450205676215, 0.0239949769915712, 0.0121839403520594, 0.0747909813605466, 0.130978606202671, 0.105190101154968, 0.0, 0.0, 0.0977527231542916, 0.134671474358974, 0.0923759484791781, 0.0152088167321609, -0.0424105156218096, -0.0444370521453856};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897367, 0.146689735060772, 0.0846913580246916, 0.027580151368202, 0.169960078788608, -0.116354199215622, 0.00900244447014198, -0.123909112020907, 0.00589348331772356, 0.0622190478619808, -0.0208939858934041, 0.212914284411494, 0.130542218057778, -0.103144987198749, -0.0388616432303089, 0.0, 0.067318278764777, 0.0, 0.0501760824821074, 0.0, -0.0448788525098514, 0.0, -0.209004113524299, -0.0159966513277143, -0.116709323372357, -0.110560581141678, 0.0436595354008901, 0.105190101154968, 0.0, 0.0, -0.195505446308583, -0.0897809829059831, 0.0527862562738159, 0.0608352669286438, -0.0141368385406031, -0.0444370521453853};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897357, -0.146689735060772, 0.084691358024691, 0.0275801513682018, -0.169960078788608, -0.116354199215622, -0.00900244447014219, -0.123909112020908, -0.00589348331772321, 0.0622190478619813, -0.020893985893404, -0.212914284411494, 0.130542218057778, 0.103144987198749, -0.0388616432303089, 0.0, 0.0673182787647772, 0.0, 0.0501760824821075, 0.0, -0.0448788525098515, 0.0, 0.209004113524299, -0.015996651327714, 0.116709323372357, -0.110560581141678, -0.0436595354008903, 0.105190101154969, 0.0, 0.0, 0.195505446308583, -0.0897809829059828, -0.0527862562738161, 0.0608352669286439, 0.0141368385406032, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794733, 0.0756368946407103, -0.0145563271604936, 0.00249445055036627, 0.262085586960811, -0.174236624657547, 0.0450122223507106, 0.0294555871558474, -0.114922924695604, 0.147770238672206, 0.0313409788401059, -0.0329049348635945, -0.0849669524551501, 0.0475176538077774, 0.00488696868935361, 0.0, -0.100977418147166, 0.0267161136450782, -0.0366285402119385, 0.0884206649831649, -0.0813429201741057, 0.0, -0.10450205676215, 0.023994976991571, -0.0121839403520593, 0.0747909813605465, -0.130978606202671, 0.105190101154968, 0.0, 0.0, -0.0977527231542916, 0.134671474358974, -0.0923759484791779, 0.0152088167321608, 0.0424105156218096, -0.0444370521453856};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 30:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, -0.119185409736877, 0.0688117283950617, 0.0134919966875161, 0.067711823181047, 0.0737246698840908, 0.0864234669133645, 0.0995620584308344, 0.0565774398501438, -0.109855506381311, -0.0491623197491858, -0.0046454025689783, 0.0778672879642883, 0.187029485387411, 0.0845708952828256, 0.0, -0.0448788525098514, 0.0498700788041457, -0.000669014433094749, -0.0126963006129674, 0.00373990437582073, 0.0, 0.0, -0.127973210621713, -0.0538658415564726, -0.0650356359656927, -0.164562864203355, -0.15948176626721, 0.0, 0.0, 0.0, -0.119707977207977, -0.158358768821448, -0.0608352669286438, 0.0659719131894815, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 31:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897362, 0.0, -0.169382716049382, -0.191837366854591, 0.0, 0.0798987952645629, 0.0, -0.131517566267805, 0.0, 0.045206026962221, 0.0737434796237789, 0.0, -0.237266206855891, 0.0, 0.115004712270417, 0.0, 0.0673182787647772, 0.0, 0.0501760824821075, 0.0, -0.0448788525098514, 0.0, 0.0, 0.191959815932569, 0.0, 0.143078399124524, 0.0, -0.15948176626721, 0.0, 0.0, 0.0, 0.179561965811966, 0.0, -0.121670533857288, 0.0, 0.0888741042907708};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 32:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, 0.119185409736877, 0.0688117283950615, 0.013491996687516, -0.0677118231810468, 0.0737246698840904, -0.0864234669133643, 0.0995620584308345, -0.0565774398501435, -0.109855506381311, -0.0491623197491857, 0.00464540256897794, 0.0778672879642884, -0.187029485387412, 0.0845708952828258, 0.0, -0.0448788525098514, -0.049870078804146, -0.000669014433094727, 0.0126963006129673, 0.00373990437582091, 0.0, 0.0, -0.127973210621713, 0.0538658415564726, -0.0650356359656925, 0.164562864203355, -0.15948176626721, 0.0, 0.0, 0.0, -0.119707977207977, 0.158358768821448, -0.0608352669286437, -0.0659719131894816, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 33:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794732, -0.0252122982135702, 0.0727816358024687, 0.0397229483869665, -0.233248516535716, -0.207534805402684, -0.0297080667514691, -0.0694543180538244, -0.163838836232707, -0.0733990330246811, 0.0, 0.0729328203329554, -0.00824477166680684, -0.0766871575585781, -0.0172653384833448, 0.0, 0.0, 0.0908347863932656, 0.00351232577374768, 0.0720968499093499, 0.115002059556494, 0.0, 0.0, 0.0, 0.126969483668828, 0.045524945175985, 0.0940359224019173, 0.135729162780604, 0.0, 0.0, 0.0, 0.0, 0.118769076616086, 0.106461717125127, -0.0494789348921112, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 34:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794729, 0.0252122982135703, 0.0727816358024692, 0.0397229483869665, 0.233248516535717, -0.207534805402684, 0.0297080667514689, -0.0694543180538244, 0.163838836232707, -0.0733990330246812, 0.0, -0.0729328203329553, -0.00824477166680688, 0.0766871575585783, -0.017265338483345, 0.0, 0.0, -0.0908347863932656, 0.00351232577374754, -0.0720968499093499, 0.115002059556494, 0.0, 0.0, 0.0, -0.126969483668828, 0.0455249451759847, -0.0940359224019174, 0.135729162780604, 0.0, 0.0, 0.0, 0.0, -0.118769076616086, 0.106461717125127, 0.0494789348921112, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 35:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, 0.0, 0.195848765432099, -0.036334260846846, 0.0, 0.248452418151448, 0.0, -0.00217384407054227, 0.0, -0.0208044941288498, 0.0, 0.0, -0.0815316309273139, 0.0, -0.10564046088962, 0.0, 0.0, 0.0, -0.0983451216649306, 0.0, -0.109953188649136, 0.0, 0.0, 0.0, 0.0, -0.0910498903519698, 0.0, -0.0576848941817567, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0851693737001013, 0.0, 0.0888741042907709};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 36:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556535, -0.00446377291456791, -0.00257716049382716, 0.0153118474035067, 0.0118605059986902, 0.00684766633106896, -0.0117674809859715, -0.00994533662273069, -0.00770362462245253, -0.00444768974950885, 0.0147486959247558, 0.0130071271931385, 0.010993028889076, 0.00851516356235372, 0.0049162319749186, -0.0124038595664064, -0.0112197131274629, -0.0098948569055845, -0.00836268041368458, -0.00647770439437109, -0.00373990437582095, 0.00699112079973239, 0.00643089580074767, 0.00581696411916874, 0.00513008014823548, 0.00433570906437952, 0.00335842580006848, 0.0019389880397229, -0.00614657010405816, -0.00572214535859481, -0.00526360816984644, -0.00476111272986274, -0.00419890674905354, -0.0035487239041709, -0.0027488297162284, -0.00158703757662089};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 37:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556514, 0.00446377291456793, -0.00257716049382712, 0.0153118474035067, -0.0118605059986903, 0.00684766633106895, 0.0117674809859715, -0.00994533662273073, 0.00770362462245257, -0.00444768974950882, 0.0147486959247558, -0.0130071271931385, 0.010993028889076, -0.0085151635623537, 0.00491623197491859, 0.0124038595664064, -0.0112197131274628, 0.0098948569055845, -0.00836268041368457, 0.00647770439437107, -0.00373990437582095, 0.00699112079973241, -0.00643089580074764, 0.00581696411916877, -0.00513008014823547, 0.0043357090643795, -0.00335842580006846, 0.00193898803972294, 0.00614657010405816, -0.00572214535859479, 0.00526360816984648, -0.00476111272986275, 0.00419890674905356, -0.00354872390417088, 0.00274882971622841, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 38:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.00728931064556508, 0.0, 0.00515432098765426, 0.0, 0.0, 0.0205429989932068, 0.0, 0.0, 0.0, 0.0177907589980352, 0.0, 0.0, 0.0, 0.0, 0.024581159874593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0224394262549257, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0135729162780604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 39:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481991, 0.07399973241905, -0.052554012345679, 0.0690445086299521, -0.0287155488472387, 0.00942957330835723, 0.0706691890906156, -0.0447268417514065, 0.0268995417144655, -0.0132944606173843, 0.0485477907523211, -0.0138587843307845, -0.00664162162048343, 0.0146227659984467, -0.0111785750858268, 0.0260481050894534, 0.00112197131274631, -0.0184044338443871, 0.0265933237155169, -0.0262994798411465, 0.0168295696911943, 0.0122344613995317, 0.00321544790037387, -0.0138152897830258, 0.0198790605744125, -0.0216785453218976, 0.0193109483503938, -0.0118763017433029, 0.0, 0.0114442907171896, -0.0195505446308583, 0.0244857226107226, -0.026393128136908, 0.0253480278869349, -0.0212052578109048, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 40:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.0468228395394874, 0.0920640432098766, -0.030074601918568, 0.0376595369773985, -0.00151546713884317, -0.0252068445163978, 0.0944535248650602, -0.109534597090828, 0.0734962502869654, -0.010446992946702, 0.0623258178004556, -0.0455752656026277, 0.0165995003968503, -0.00158021742050958, 0.0, 0.0336591393823886, -0.0160296681870469, -0.013547542270169, 0.0312873122248122, -0.0252443545367914, 0.0, 0.0209004113524298, -0.00799832566385705, -0.0160315004632359, 0.035769599781131, -0.041980322500856, 0.0288424470908785, 0.0, 0.0, 0.0195505446308583, -0.0448904914529915, 0.0659828203422699, -0.0760440836608047, 0.0706841927030161, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 41:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205069, 0.117220815070885, -0.146697530864198, 0.0824266867397792, -0.013780546928806, -0.0597907914686163, 0.0432117334566822, -0.0338032752969318, 0.103641113773105, -0.110827679004154, 0.0122905799372965, -0.00232270128448912, 0.0407658154636569, -0.0281304510542043, 0.00658423925212309, 0.0, 0.0112197131274629, 0.0249350394020729, -0.0244190268079589, 0.00272063584563577, 0.00747980875164186, 0.0, 0.0, 0.0319933026554282, -0.0269329207782362, -0.00650356359656924, 0.035263470900719, -0.0322356761603936, 0.0, 0.0, 0.0, 0.0299269943019943, -0.079179384410724, 0.121670533857288, -0.131943826378964, 0.0888741042907711};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 42:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205076, -0.0684333808654046, 0.174864969135803, -0.0397229483869663, 0.0808361535894336, 0.0494631635594633, -0.00990268891715632, 0.0694543180538244, -0.081835225497529, 0.120063318921167, 0.0, 0.0243109401109851, 0.00824477166680707, -0.0236194417860524, 0.0378959548066642, 0.0, 0.0, 0.0302782621310885, -0.00351232577374755, -0.016777254381421, 0.0140246414093287, 0.0, 0.0, 0.0, 0.0423231612229426, -0.045524945175985, 0.0117544903002397, 0.00848307267378769, 0.0, 0.0, 0.0, 0.0, 0.039589692205362, -0.106461717125127, 0.148436804676334, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 43:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.019516365403582, 0.0563183804251178, -0.0865817901234568, 0.0181671304234229, 0.00029165178685305, -0.0446641842864599, 0.0, 0.00108692203527105, 0.0930328438012032, -0.135277820468667, 0.0, 0.0, 0.0407658154636569, 0.0192604890100857, -0.0656960760934063, 0.0, 0.0, 0.0, 0.0491725608324653, -0.0272063584563586, -0.00560985656373146, 0.0, 0.0, 0.0, 0.0, 0.0455249451759849, -0.0470179612009587, 0.0186627598823332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425846868500507, -0.0989578697842226, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 44:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481993, -0.00851324355263416, 0.0903626543209878, 0.0, 0.024766097566937, 0.0711848592162147, 0.0, 0.0, 0.0193643023296622, 0.0867177979576364, 0.0, 0.0, 0.0, 0.0473909400642899, 0.0261906405806675, 0.0, 0.0, 0.0, 0.0, 0.0498783238366572, -0.0145856270657017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.035263470900719, -0.0220559889518482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0329859565947409, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 45:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481979, -0.07399973241905, -0.0525540123456792, 0.0690445086299523, 0.0287155488472386, 0.00942957330835727, -0.0706691890906157, -0.0447268417514065, -0.0268995417144655, -0.0132944606173843, 0.0485477907523211, 0.0138587843307845, -0.00664162162048346, -0.0146227659984466, -0.0111785750858268, -0.0260481050894534, 0.0011219713127463, 0.0184044338443871, 0.026593323715517, 0.0262994798411465, 0.0168295696911943, 0.0122344613995317, -0.00321544790037381, -0.0138152897830258, -0.0198790605744125, -0.0216785453218975, -0.0193109483503938, -0.0118763017433029, 0.0, 0.0114442907171896, 0.0195505446308583, 0.0244857226107226, 0.026393128136908, 0.0253480278869349, 0.0212052578109048, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 46:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035825, 0.0468228395394876, 0.0920640432098768, -0.0300746019185683, -0.0376595369773984, -0.00151546713884301, 0.025206844516398, 0.0944535248650602, 0.109534597090828, 0.0734962502869655, -0.010446992946702, -0.0623258178004555, -0.0455752656026276, -0.0165995003968502, -0.00158021742050955, 0.0, 0.0336591393823886, 0.0160296681870468, -0.0135475422701691, -0.0312873122248123, -0.0252443545367915, 0.0, -0.0209004113524299, -0.0079983256638571, 0.0160315004632358, 0.0357695997811309, 0.0419803225008559, 0.0288424470908784, 0.0, 0.0, -0.0195505446308584, -0.0448904914529915, -0.06598282034227, -0.0760440836608048, -0.0706841927030161, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 47:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205075, -0.117220815070885, -0.146697530864198, 0.0824266867397795, 0.0137805469288058, -0.0597907914686168, -0.0432117334566823, -0.0338032752969318, -0.103641113773105, -0.110827679004154, 0.0122905799372965, 0.00232270128448907, 0.040765815463657, 0.0281304510542041, 0.00658423925212304, 0.0, 0.0112197131274629, -0.0249350394020729, -0.0244190268079588, -0.00272063584563579, 0.00747980875164197, 0.0, 0.0, 0.0319933026554283, 0.0269329207782364, -0.00650356359656912, -0.0352634709007189, -0.0322356761603934, 0.0, 0.0, 0.0, 0.0299269943019944, 0.0791793844107241, 0.121670533857288, 0.131943826378963, 0.0888741042907711};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 48:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205073, 0.0684333808654049, 0.174864969135803, -0.0397229483869663, -0.0808361535894333, 0.0494631635594635, 0.00990268891715634, 0.0694543180538245, 0.0818352254975289, 0.120063318921167, 0.0, -0.0243109401109851, 0.00824477166680698, 0.0236194417860526, 0.0378959548066643, 0.0, 0.0, -0.0302782621310886, -0.00351232577374768, 0.016777254381421, 0.0140246414093285, 0.0, 0.0, 0.0, -0.0423231612229427, -0.0455249451759851, -0.0117544903002399, 0.00848307267378759, 0.0, 0.0, 0.0, 0.0, -0.039589692205362, -0.106461717125127, -0.148436804676334, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 49:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.0563183804251178, -0.0865817901234568, 0.0181671304234229, -0.000291651786853125, -0.0446641842864603, 0.0, 0.00108692203527107, -0.0930328438012031, -0.135277820468667, 0.0, 0.0, 0.0407658154636569, -0.0192604890100856, -0.0656960760934063, 0.0, 0.0, 0.0, 0.0491725608324653, 0.0272063584563585, -0.00560985656373141, 0.0, 0.0, 0.0, 0.0, 0.045524945175985, 0.0470179612009588, 0.0186627598823332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0425846868500507, 0.0989578697842225, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 50:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481992, 0.00851324355263412, 0.0903626543209877, 0.0, -0.024766097566937, 0.0711848592162147, 0.0, 0.0, -0.0193643023296623, 0.0867177979576364, 0.0, 0.0, 0.0, -0.0473909400642899, 0.0261906405806675, 0.0, 0.0, 0.0, 0.0, -0.0498783238366572, -0.0145856270657017, 0.0, 0.0, 0.0, 0.0, 0.0, -0.035263470900719, -0.0220559889518483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0329859565947408, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 51:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481989, -0.0825129759716842, -0.0378086419753086, 0.0370716141541869, 0.0534816464141758, 0.0380269995024525, -0.0440476747289097, -0.0522266037947772, -0.0482002742770939, -0.0300644383614339, -0.0171190220555201, 0.0138587843307845, 0.0300672427055383, 0.0327681740658432, 0.0216548313180938, 0.0421731225257819, 0.0134636557529554, -0.00554111986712732, -0.015721839177727, -0.0178784641284641, -0.0119676940026271, -0.034955603998662, -0.017684963452056, -0.00508984360427266, 0.00320630009264718, 0.00758749086266416, 0.00839606450017114, 0.00557459061420343, 0.0430259907284071, 0.028610726792974, 0.0172947125580669, 0.00884206649831655, 0.00299921910646676, -0.000506960557738677, -0.00196344979730598, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 52:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035832, 0.103141219964605, -0.00548225308641984, -0.0304511227563592, -0.0373678851905456, -0.00117869666354457, 0.153105859167203, 0.0584220593958226, 0.00719846890950483, -0.00707255583118618, -0.0371351093819744, -0.0623258178004555, -0.0306561549674531, 0.00266098861323558, 0.0117638407971266, -0.0372115786992194, 0.0269273115059109, 0.0290908793024184, 0.00953345567160042, -0.00719025187775195, -0.00953675615834336, 0.0629200871975914, -0.00160772395018692, -0.0196322539021946, -0.014748980426177, -0.00325178179828463, 0.00503763870010283, 0.0055745906142034, -0.129077972185221, -0.0514993082273532, -0.0127830484124842, 0.00204047688422678, 0.00419890674905365, 0.00152088167321606, -0.00117806987838366, -0.00158703757662093};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 53:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205075, -0.185654195936289, -0.0281674382716049, -0.0219323388013347, 0.0946167005182399, 0.0335507586016103, -0.15670683695526, 0.00374988102168536, -0.027236312189764, -0.0268562687060505, 0.0395054355127387, 0.0266336413954741, -0.0104041166271612, 0.00451100926815165, 0.0159484906329205, -0.0124038595664062, -0.0291712541314034, 0.00969695976747278, 0.0145510639198111, -0.00239675062591724, -0.00953675615834347, -0.0349556039986617, 0.0482317185056075, 0.0189051333872984, -0.00769512022235322, -0.00867141812875899, 0.00167921290003412, 0.00557459061420338, 0.215129953642036, 0.028610726792974, -0.0112791603639569, -0.00612143065268053, 0.00179953146387996, 0.00253480278869353, -0.000392689959461142, -0.00158703757662088};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 54:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0147041109205074, 0.185654195936289, -0.0281674382716049, -0.0219323388013343, -0.0946167005182399, 0.0335507586016104, 0.15670683695526, 0.0037498810216853, 0.027236312189764, -0.0268562687060504, 0.0395054355127387, -0.0266336413954742, -0.0104041166271613, -0.00451100926815163, 0.0159484906329204, 0.0124038595664061, -0.0291712541314034, -0.00969695976747277, 0.0145510639198112, 0.00239675062591722, -0.00953675615834343, -0.0349556039986622, -0.0482317185056074, 0.0189051333872985, 0.00769512022235318, -0.00867141812875902, -0.00167921290003412, 0.00557459061420343, -0.215129953642036, 0.028610726792974, 0.0112791603639569, -0.00612143065268073, -0.00179953146387996, 0.00253480278869344, 0.00039268995946115, -0.00158703757662097};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 55:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0195163654035826, -0.103141219964605, -0.00548225308641981, -0.0304511227563594, 0.0373678851905457, -0.0011786966635447, -0.153105859167203, 0.0584220593958227, -0.00719846890950486, -0.00707255583118621, -0.0371351093819744, 0.0623258178004556, -0.030656154967453, -0.00266098861323555, 0.0117638407971266, 0.0372115786992195, 0.0269273115059109, -0.0290908793024184, 0.00953345567160042, 0.00719025187775191, -0.00953675615834339, 0.0629200871975917, 0.00160772395018689, -0.0196322539021946, 0.014748980426177, -0.00325178179828464, -0.00503763870010279, 0.00557459061420338, 0.129077972185222, -0.0514993082273533, 0.0127830484124842, 0.00204047688422688, -0.00419890674905363, 0.00152088167321612, 0.00117806987838363, -0.00158703757662089};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 56:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0163081957481992, 0.0825129759716841, -0.0378086419753087, 0.0370716141541869, -0.0534816464141758, 0.0380269995024526, 0.0440476747289096, -0.0522266037947772, 0.0482002742770939, -0.0300644383614339, -0.0171190220555201, -0.0138587843307845, 0.0300672427055383, -0.0327681740658432, 0.0216548313180938, -0.0421731225257819, 0.0134636557529554, 0.00554111986712731, -0.015721839177727, 0.0178784641284641, -0.0119676940026271, -0.034955603998662, 0.0176849634520561, -0.00508984360427268, -0.00320630009264717, 0.00758749086266414, -0.00839606450017119, 0.00557459061420336, -0.0430259907284071, 0.028610726792974, -0.0172947125580669, 0.00884206649831649, -0.00299921910646679, -0.000506960557738727, 0.00196344979730601, -0.0015870375766209};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 57:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, -0.169610006164017, -0.0979243827160495, 0.17912978857914, 0.166897735026651, 0.0557355136618973, 0.0144039111522275, 0.00999968272449431, 0.00942957330835719, 0.00641633931076675, -0.094637465517183, -0.000774233761496396, -0.0297727865745809, -0.0681719939962245, -0.0575901459919035, 0.104192420357814, 0.0, 0.00831167980069093, 0.0491725608324653, 0.0734571678321678, 0.0549765943245681, -0.0734067683971902, 0.0128617916014953, 0.0189051333872985, -0.00897764025941208, -0.0390213815794156, -0.0520555999010614, -0.0373255197646663, 0.0, -0.0686657443031377, -0.0782021785234332, -0.0571333527583528, -0.026393128136908, 0.0, 0.0141368385406032, 0.0126963006129673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 58:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.037428645979474, -0.0504245964271405, -0.0582253086419751, -0.298628089473106, -0.0288370704250942, 0.095095562962406, 0.183199744967392, -0.0515744505736147, -0.0244579557685518, -0.0334184339102437, -0.0583802547021579, -0.0400278854693609, 0.0730578378253177, 0.0291695037508008, -0.0191674520450695, -0.130240525447267, -0.0100977418147166, -0.0718366611345433, -0.0496743216572864, 0.0190444509194511, 0.0403909672588661, 0.183516920992976, -0.0160772395018689, 0.0487170744980384, 0.0775924622420617, 0.0325178179828464, -0.0260277999505307, -0.037325519764666, 0.0, 0.171664360757844, 0.0977527231542916, 0.00816190753690784, -0.0263931281369079, -0.0152088167321609, 0.00706841927030164, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 59:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, 0.0, -0.137623456790123, 0.100907584528028, 0.0, -0.00446220879770451, 0.0, 0.172603219201053, 0.0, 0.0534694942563901, 0.20893985893404, 0.0, -0.073286859260507, 0.0, -0.0400907012240387, 0.0, 0.0179515410039407, 0.0, -0.0521831257813917, 0.0, 0.0403909672588665, -0.244689227990634, 0.0, -0.107613836204622, 0.0, 0.0563642178369336, 0.0, -0.0373255197646662, 0.0, -0.228885814343792, 0.0, 0.048971445221445, 0.0, -0.0202784223095479, 0.0, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 60:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794734, 0.0504245964271398, -0.0582253086419752, -0.298628089473106, 0.0288370704250943, 0.0950955629624062, -0.183199744967392, -0.0515744505736146, 0.0244579557685516, -0.033418433910244, -0.0583802547021577, 0.0400278854693607, 0.0730578378253179, -0.0291695037508011, -0.0191674520450693, 0.130240525447268, -0.0100977418147166, 0.0718366611345434, -0.0496743216572865, -0.0190444509194507, 0.0403909672588661, 0.183516920992976, 0.0160772395018692, 0.0487170744980381, -0.0775924622420615, 0.0325178179828463, 0.0260277999505306, -0.0373255197646663, 0.0, 0.171664360757844, -0.0977527231542917, 0.00816190753690777, 0.026393128136908, -0.0152088167321609, -0.00706841927030159, 0.0126963006129674};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 61:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, 0.169610006164017, -0.0979243827160495, 0.179129788579139, -0.166897735026651, 0.0557355136618974, -0.0144039111522274, 0.00999968272449436, -0.00942957330835727, 0.00641633931076692, -0.0946374655171832, 0.000774233761496393, -0.029772786574581, 0.0681719939962246, -0.0575901459919036, -0.104192420357814, 0.0, -0.008311679800691, 0.0491725608324653, -0.0734571678321679, 0.0549765943245681, -0.0734067683971902, -0.0128617916014954, 0.0189051333872986, 0.00897764025941205, -0.0390213815794155, 0.0520555999010615, -0.0373255197646662, 0.0, -0.0686657443031377, 0.0782021785234333, -0.0571333527583528, 0.026393128136908, 0.0, -0.0141368385406032, 0.0126963006129672};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 62:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794735, -0.0756368946407107, -0.0145563271604938, 0.00249445055036625, -0.262085586960811, -0.174236624657547, -0.0450122223507107, 0.0294555871558472, 0.114922924695604, 0.147770238672206, 0.0313409788401059, 0.0329049348635946, -0.0849669524551501, -0.0475176538077774, 0.0048869686893537, 0.0, -0.100977418147166, -0.026716113645078, -0.0366285402119385, -0.0884206649831648, -0.0813429201741057, 0.0, 0.10450205676215, 0.0239949769915712, 0.0121839403520594, 0.0747909813605466, 0.130978606202671, 0.105190101154968, 0.0, 0.0, 0.0977527231542916, 0.134671474358974, 0.0923759484791781, 0.0152088167321609, -0.0424105156218096, -0.0444370521453856};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 63:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897367, 0.146689735060772, 0.0846913580246916, 0.027580151368202, 0.169960078788608, -0.116354199215622, 0.00900244447014198, -0.123909112020907, 0.00589348331772356, 0.0622190478619808, -0.0208939858934041, 0.212914284411494, 0.130542218057778, -0.103144987198749, -0.0388616432303089, 0.0, 0.067318278764777, 0.0, 0.0501760824821074, 0.0, -0.0448788525098514, 0.0, -0.209004113524299, -0.0159966513277143, -0.116709323372357, -0.110560581141678, 0.0436595354008901, 0.105190101154968, 0.0, 0.0, -0.195505446308583, -0.0897809829059831, 0.0527862562738159, 0.0608352669286438, -0.0141368385406031, -0.0444370521453853};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 64:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897357, -0.146689735060772, 0.084691358024691, 0.0275801513682018, -0.169960078788608, -0.116354199215622, -0.00900244447014219, -0.123909112020908, -0.00589348331772321, 0.0622190478619813, -0.020893985893404, -0.212914284411494, 0.130542218057778, 0.103144987198749, -0.0388616432303089, 0.0, 0.0673182787647772, 0.0, 0.0501760824821075, 0.0, -0.0448788525098515, 0.0, 0.209004113524299, -0.015996651327714, 0.116709323372357, -0.110560581141678, -0.0436595354008903, 0.105190101154969, 0.0, 0.0, 0.195505446308583, -0.0897809829059828, -0.0527862562738161, 0.0608352669286439, 0.0141368385406032, -0.0444370521453855};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 65:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794733, 0.0756368946407103, -0.0145563271604936, 0.00249445055036627, 0.262085586960811, -0.174236624657547, 0.0450122223507106, 0.0294555871558474, -0.114922924695604, 0.147770238672206, 0.0313409788401059, -0.0329049348635945, -0.0849669524551501, 0.0475176538077774, 0.00488696868935361, 0.0, -0.100977418147166, 0.0267161136450782, -0.0366285402119385, 0.0884206649831649, -0.0813429201741057, 0.0, -0.10450205676215, 0.023994976991571, -0.0121839403520593, 0.0747909813605465, -0.130978606202671, 0.105190101154968, 0.0, 0.0, -0.0977527231542916, 0.134671474358974, -0.0923759484791779, 0.0152088167321608, 0.0424105156218096, -0.0444370521453856};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 66:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, -0.119185409736877, 0.0688117283950617, 0.0134919966875161, 0.067711823181047, 0.0737246698840908, 0.0864234669133645, 0.0995620584308344, 0.0565774398501438, -0.109855506381311, -0.0491623197491858, -0.0046454025689783, 0.0778672879642883, 0.187029485387411, 0.0845708952828256, 0.0, -0.0448788525098514, 0.0498700788041457, -0.000669014433094749, -0.0126963006129674, 0.00373990437582073, 0.0, 0.0, -0.127973210621713, -0.0538658415564726, -0.0650356359656927, -0.164562864203355, -0.15948176626721, 0.0, 0.0, 0.0, -0.119707977207977, -0.158358768821448, -0.0608352669286438, 0.0659719131894815, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 67:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.0187143229897362, 0.0, -0.169382716049382, -0.191837366854591, 0.0, 0.0798987952645629, 0.0, -0.131517566267805, 0.0, 0.045206026962221, 0.0737434796237789, 0.0, -0.237266206855891, 0.0, 0.115004712270417, 0.0, 0.0673182787647772, 0.0, 0.0501760824821075, 0.0, -0.0448788525098514, 0.0, 0.0, 0.191959815932569, 0.0, 0.143078399124524, 0.0, -0.15948176626721, 0.0, 0.0, 0.0, 0.179561965811966, 0.0, -0.121670533857288, 0.0, 0.0888741042907708};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 68:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.243286198866575, 0.119185409736877, 0.0688117283950615, 0.013491996687516, -0.0677118231810468, 0.0737246698840904, -0.0864234669133643, 0.0995620584308345, -0.0565774398501435, -0.109855506381311, -0.0491623197491857, 0.00464540256897794, 0.0778672879642884, -0.187029485387412, 0.0845708952828258, 0.0, -0.0448788525098514, -0.049870078804146, -0.000669014433094727, 0.0126963006129673, 0.00373990437582091, 0.0, 0.0, -0.127973210621713, 0.0538658415564726, -0.0650356359656925, 0.164562864203355, -0.15948176626721, 0.0, 0.0, 0.0, -0.119707977207977, 0.158358768821448, -0.0608352669286437, -0.0659719131894816, 0.088874104290771};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 69:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794732, -0.0252122982135702, 0.0727816358024687, 0.0397229483869665, -0.233248516535716, -0.207534805402684, -0.0297080667514691, -0.0694543180538244, -0.163838836232707, -0.0733990330246811, 0.0, 0.0729328203329554, -0.00824477166680684, -0.0766871575585781, -0.0172653384833448, 0.0, 0.0, 0.0908347863932656, 0.00351232577374768, 0.0720968499093499, 0.115002059556494, 0.0, 0.0, 0.0, 0.126969483668828, 0.045524945175985, 0.0940359224019173, 0.135729162780604, 0.0, 0.0, 0.0, 0.0, 0.118769076616086, 0.106461717125127, -0.0494789348921112, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 70:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {-0.0374286459794729, 0.0252122982135703, 0.0727816358024692, 0.0397229483869665, 0.233248516535717, -0.207534805402684, 0.0297080667514689, -0.0694543180538244, 0.163838836232707, -0.0733990330246812, 0.0, -0.0729328203329553, -0.00824477166680688, 0.0766871575585783, -0.017265338483345, 0.0, 0.0, -0.0908347863932656, 0.00351232577374754, -0.0720968499093499, 0.115002059556494, 0.0, 0.0, 0.0, -0.126969483668828, 0.0455249451759847, -0.0940359224019174, 0.135729162780604, 0.0, 0.0, 0.0, 0.0, -0.118769076616086, 0.106461717125127, 0.0494789348921112, -0.111092630363464};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 71:
      {
        
      // Array of basisvalues
      double basisvalues[36] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[28] = basisvalues[21]*1.85714285714286*tmp0 - basisvalues[15]*0.857142857142857*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[29] = basisvalues[21]*(6.5 + 7.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[35] = basisvalues[27]*(0.00961538461538462 + Y*1.875) - basisvalues[20]*0.865384615384615;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[34] = basisvalues[26]*(0.0897435897435897 + Y*1.94444444444444) - basisvalues[19]*0.854700854700855;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[33] = basisvalues[25]*(0.269230769230769 + Y*2.1) - basisvalues[18]*0.830769230769231;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[32] = basisvalues[24]*(0.59965034965035 + Y*2.38636363636364) - basisvalues[17]*0.786713286713287;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[31] = basisvalues[23]*(1.21153846153846 + Y*2.91666666666667) - basisvalues[16]*0.705128205128205;
      basisvalues[30] = basisvalues[22]*(2.50591715976331 + Y*4.03846153846154) - basisvalues[15]*0.532544378698225;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[35] *= std::sqrt(4.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[34] *= std::sqrt(12.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[33] *= std::sqrt(20.0);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[32] *= std::sqrt(28.0);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[31] *= std::sqrt(36.0);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[30] *= std::sqrt(44.0);
      basisvalues[21] *= std::sqrt(45.5);
      basisvalues[29] *= std::sqrt(52.0);
      basisvalues[28] *= std::sqrt(60.0);
      
      // Table(s) of coefficients
      static const double coefficients0[36] = \
      {0.175914636103524, 0.0, 0.195848765432099, -0.036334260846846, 0.0, 0.248452418151448, 0.0, -0.00217384407054227, 0.0, -0.0208044941288498, 0.0, 0.0, -0.0815316309273139, 0.0, -0.10564046088962, 0.0, 0.0, 0.0, -0.0983451216649306, 0.0, -0.109953188649136, 0.0, 0.0, 0.0, 0.0, -0.0910498903519698, 0.0, -0.0576848941817567, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0851693737001013, 0.0, 0.0888741042907709};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 36; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 72; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 72; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 7)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[256];
    for (unsigned int r = 0; r < 256; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 72; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
      y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 22:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 23:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 24:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 25:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 26:
      {
        y[0] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 27:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 28:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 29:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 30:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 31:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 32:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 33:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 34:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 35:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 36:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 37:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 38:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 39:
      {
        y[0] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 40:
      {
        y[0] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 41:
      {
        y[0] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 42:
      {
        y[0] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 43:
      {
        y[0] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 44:
      {
        y[0] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 45:
      {
        y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 46:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 47:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 48:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 49:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 50:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 51:
      {
        y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
      y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 52:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 53:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 54:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 55:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 56:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 57:
      {
        y[0] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 58:
      {
        y[0] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 59:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 60:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 61:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 62:
      {
        y[0] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 63:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 64:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 65:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 66:
      {
        y[0] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 67:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 68:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 69:
      {
        y[0] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 70:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 71:
      {
        y[0] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
      y[1] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
    y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[28] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[29] = vals[0];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[30] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[31] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[32] = vals[0];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[33] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[34] = vals[0];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[35] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[40] = vals[1];
    y[0] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[41] = vals[1];
    y[0] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[42] = vals[1];
    y[0] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[43] = vals[1];
    y[0] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[44] = vals[1];
    y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[45] = vals[1];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[46] = vals[1];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[47] = vals[1];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[48] = vals[1];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[49] = vals[1];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[50] = vals[1];
    y[0] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
    y[1] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[51] = vals[1];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[52] = vals[1];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[53] = vals[1];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[54] = vals[1];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[55] = vals[1];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[56] = vals[1];
    y[0] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[57] = vals[1];
    y[0] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[58] = vals[1];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[59] = vals[1];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[60] = vals[1];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[61] = vals[1];
    y[0] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[62] = vals[1];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[63] = vals[1];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[64] = vals[1];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[65] = vals[1];
    y[0] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[66] = vals[1];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[67] = vals[1];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[68] = vals[1];
    y[0] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[69] = vals[1];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[70] = vals[1];
    y[0] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    y[1] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[71] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[36];
    vertex_values[3] = dof_values[37];
    vertex_values[5] = dof_values[38];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2)), 7, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 36*num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 36;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 36;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 36*c.entity_indices[2][0];
    dofs[1] = 36*c.entity_indices[2][0] + 1;
    dofs[2] = 36*c.entity_indices[2][0] + 2;
    dofs[3] = 36*c.entity_indices[2][0] + 3;
    dofs[4] = 36*c.entity_indices[2][0] + 4;
    dofs[5] = 36*c.entity_indices[2][0] + 5;
    dofs[6] = 36*c.entity_indices[2][0] + 6;
    dofs[7] = 36*c.entity_indices[2][0] + 7;
    dofs[8] = 36*c.entity_indices[2][0] + 8;
    dofs[9] = 36*c.entity_indices[2][0] + 9;
    dofs[10] = 36*c.entity_indices[2][0] + 10;
    dofs[11] = 36*c.entity_indices[2][0] + 11;
    dofs[12] = 36*c.entity_indices[2][0] + 12;
    dofs[13] = 36*c.entity_indices[2][0] + 13;
    dofs[14] = 36*c.entity_indices[2][0] + 14;
    dofs[15] = 36*c.entity_indices[2][0] + 15;
    dofs[16] = 36*c.entity_indices[2][0] + 16;
    dofs[17] = 36*c.entity_indices[2][0] + 17;
    dofs[18] = 36*c.entity_indices[2][0] + 18;
    dofs[19] = 36*c.entity_indices[2][0] + 19;
    dofs[20] = 36*c.entity_indices[2][0] + 20;
    dofs[21] = 36*c.entity_indices[2][0] + 21;
    dofs[22] = 36*c.entity_indices[2][0] + 22;
    dofs[23] = 36*c.entity_indices[2][0] + 23;
    dofs[24] = 36*c.entity_indices[2][0] + 24;
    dofs[25] = 36*c.entity_indices[2][0] + 25;
    dofs[26] = 36*c.entity_indices[2][0] + 26;
    dofs[27] = 36*c.entity_indices[2][0] + 27;
    dofs[28] = 36*c.entity_indices[2][0] + 28;
    dofs[29] = 36*c.entity_indices[2][0] + 29;
    dofs[30] = 36*c.entity_indices[2][0] + 30;
    dofs[31] = 36*c.entity_indices[2][0] + 31;
    dofs[32] = 36*c.entity_indices[2][0] + 32;
    dofs[33] = 36*c.entity_indices[2][0] + 33;
    dofs[34] = 36*c.entity_indices[2][0] + 34;
    dofs[35] = 36*c.entity_indices[2][0] + 35;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
      dofs[20] = 20;
      dofs[21] = 21;
      dofs[22] = 22;
      dofs[23] = 23;
      dofs[24] = 24;
      dofs[25] = 25;
      dofs[26] = 26;
      dofs[27] = 27;
      dofs[28] = 28;
      dofs[29] = 29;
      dofs[30] = 30;
      dofs[31] = 31;
      dofs[32] = 32;
      dofs[33] = 33;
      dofs[34] = 34;
      dofs[35] = 35;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[7] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[8] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[9] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[10] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[11] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[12] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[13] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[14] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[15] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    dof_coordinates[16] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
    dof_coordinates[17] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
    dof_coordinates[18] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[19] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[20] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[21] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[22] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[23] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[24] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[25] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[26] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[27] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
    dof_coordinates[28] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
    dof_coordinates[29] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
    dof_coordinates[30] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
    dof_coordinates[31] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
    dof_coordinates[32] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
    dof_coordinates[33] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
    dof_coordinates[34] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
    dof_coordinates[35] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
    dof_coordinates[36] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
    dof_coordinates[37] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
    dof_coordinates[38] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
    dof_coordinates[39] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
    dof_coordinates[40] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
    dof_coordinates[41] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
    dof_coordinates[42] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[43] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[44] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[45] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[46] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[47] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[48] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[49] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[50] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[51] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[52] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[53] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[54] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[55] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[56] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[57] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[58] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[59] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[60] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[61] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[62] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[63] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[64] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[65] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[66] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[67] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[68] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[69] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[70] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[71] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Discontinuous Lagrange', Domain(Cell('triangle', 2)), 7, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 72*num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t num_element_dofs() const
  {
    return 72;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 72;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + 36*c.entity_indices[2][0];
    dofs[1] = offset + 36*c.entity_indices[2][0] + 1;
    dofs[2] = offset + 36*c.entity_indices[2][0] + 2;
    dofs[3] = offset + 36*c.entity_indices[2][0] + 3;
    dofs[4] = offset + 36*c.entity_indices[2][0] + 4;
    dofs[5] = offset + 36*c.entity_indices[2][0] + 5;
    dofs[6] = offset + 36*c.entity_indices[2][0] + 6;
    dofs[7] = offset + 36*c.entity_indices[2][0] + 7;
    dofs[8] = offset + 36*c.entity_indices[2][0] + 8;
    dofs[9] = offset + 36*c.entity_indices[2][0] + 9;
    dofs[10] = offset + 36*c.entity_indices[2][0] + 10;
    dofs[11] = offset + 36*c.entity_indices[2][0] + 11;
    dofs[12] = offset + 36*c.entity_indices[2][0] + 12;
    dofs[13] = offset + 36*c.entity_indices[2][0] + 13;
    dofs[14] = offset + 36*c.entity_indices[2][0] + 14;
    dofs[15] = offset + 36*c.entity_indices[2][0] + 15;
    dofs[16] = offset + 36*c.entity_indices[2][0] + 16;
    dofs[17] = offset + 36*c.entity_indices[2][0] + 17;
    dofs[18] = offset + 36*c.entity_indices[2][0] + 18;
    dofs[19] = offset + 36*c.entity_indices[2][0] + 19;
    dofs[20] = offset + 36*c.entity_indices[2][0] + 20;
    dofs[21] = offset + 36*c.entity_indices[2][0] + 21;
    dofs[22] = offset + 36*c.entity_indices[2][0] + 22;
    dofs[23] = offset + 36*c.entity_indices[2][0] + 23;
    dofs[24] = offset + 36*c.entity_indices[2][0] + 24;
    dofs[25] = offset + 36*c.entity_indices[2][0] + 25;
    dofs[26] = offset + 36*c.entity_indices[2][0] + 26;
    dofs[27] = offset + 36*c.entity_indices[2][0] + 27;
    dofs[28] = offset + 36*c.entity_indices[2][0] + 28;
    dofs[29] = offset + 36*c.entity_indices[2][0] + 29;
    dofs[30] = offset + 36*c.entity_indices[2][0] + 30;
    dofs[31] = offset + 36*c.entity_indices[2][0] + 31;
    dofs[32] = offset + 36*c.entity_indices[2][0] + 32;
    dofs[33] = offset + 36*c.entity_indices[2][0] + 33;
    dofs[34] = offset + 36*c.entity_indices[2][0] + 34;
    dofs[35] = offset + 36*c.entity_indices[2][0] + 35;
    offset += 36*num_global_entities[2];
    dofs[36] = offset + 36*c.entity_indices[2][0];
    dofs[37] = offset + 36*c.entity_indices[2][0] + 1;
    dofs[38] = offset + 36*c.entity_indices[2][0] + 2;
    dofs[39] = offset + 36*c.entity_indices[2][0] + 3;
    dofs[40] = offset + 36*c.entity_indices[2][0] + 4;
    dofs[41] = offset + 36*c.entity_indices[2][0] + 5;
    dofs[42] = offset + 36*c.entity_indices[2][0] + 6;
    dofs[43] = offset + 36*c.entity_indices[2][0] + 7;
    dofs[44] = offset + 36*c.entity_indices[2][0] + 8;
    dofs[45] = offset + 36*c.entity_indices[2][0] + 9;
    dofs[46] = offset + 36*c.entity_indices[2][0] + 10;
    dofs[47] = offset + 36*c.entity_indices[2][0] + 11;
    dofs[48] = offset + 36*c.entity_indices[2][0] + 12;
    dofs[49] = offset + 36*c.entity_indices[2][0] + 13;
    dofs[50] = offset + 36*c.entity_indices[2][0] + 14;
    dofs[51] = offset + 36*c.entity_indices[2][0] + 15;
    dofs[52] = offset + 36*c.entity_indices[2][0] + 16;
    dofs[53] = offset + 36*c.entity_indices[2][0] + 17;
    dofs[54] = offset + 36*c.entity_indices[2][0] + 18;
    dofs[55] = offset + 36*c.entity_indices[2][0] + 19;
    dofs[56] = offset + 36*c.entity_indices[2][0] + 20;
    dofs[57] = offset + 36*c.entity_indices[2][0] + 21;
    dofs[58] = offset + 36*c.entity_indices[2][0] + 22;
    dofs[59] = offset + 36*c.entity_indices[2][0] + 23;
    dofs[60] = offset + 36*c.entity_indices[2][0] + 24;
    dofs[61] = offset + 36*c.entity_indices[2][0] + 25;
    dofs[62] = offset + 36*c.entity_indices[2][0] + 26;
    dofs[63] = offset + 36*c.entity_indices[2][0] + 27;
    dofs[64] = offset + 36*c.entity_indices[2][0] + 28;
    dofs[65] = offset + 36*c.entity_indices[2][0] + 29;
    dofs[66] = offset + 36*c.entity_indices[2][0] + 30;
    dofs[67] = offset + 36*c.entity_indices[2][0] + 31;
    dofs[68] = offset + 36*c.entity_indices[2][0] + 32;
    dofs[69] = offset + 36*c.entity_indices[2][0] + 33;
    dofs[70] = offset + 36*c.entity_indices[2][0] + 34;
    dofs[71] = offset + 36*c.entity_indices[2][0] + 35;
    offset += 36*num_global_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
      dofs[12] = 12;
      dofs[13] = 13;
      dofs[14] = 14;
      dofs[15] = 15;
      dofs[16] = 16;
      dofs[17] = 17;
      dofs[18] = 18;
      dofs[19] = 19;
      dofs[20] = 20;
      dofs[21] = 21;
      dofs[22] = 22;
      dofs[23] = 23;
      dofs[24] = 24;
      dofs[25] = 25;
      dofs[26] = 26;
      dofs[27] = 27;
      dofs[28] = 28;
      dofs[29] = 29;
      dofs[30] = 30;
      dofs[31] = 31;
      dofs[32] = 32;
      dofs[33] = 33;
      dofs[34] = 34;
      dofs[35] = 35;
      dofs[36] = 36;
      dofs[37] = 37;
      dofs[38] = 38;
      dofs[39] = 39;
      dofs[40] = 40;
      dofs[41] = 41;
      dofs[42] = 42;
      dofs[43] = 43;
      dofs[44] = 44;
      dofs[45] = 45;
      dofs[46] = 46;
      dofs[47] = 47;
      dofs[48] = 48;
      dofs[49] = 49;
      dofs[50] = 50;
      dofs[51] = 51;
      dofs[52] = 52;
      dofs[53] = 53;
      dofs[54] = 54;
      dofs[55] = 55;
      dofs[56] = 56;
      dofs[57] = 57;
      dofs[58] = 58;
      dofs[59] = 59;
      dofs[60] = 60;
      dofs[61] = 61;
      dofs[62] = 62;
      dofs[63] = 63;
      dofs[64] = 64;
      dofs[65] = 65;
      dofs[66] = 66;
      dofs[67] = 67;
      dofs[68] = 68;
      dofs[69] = 69;
      dofs[70] = 70;
      dofs[71] = 71;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[7] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[8] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[9] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[10] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[11] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[12] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[13] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[14] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[15] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    dof_coordinates[16] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
    dof_coordinates[17] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
    dof_coordinates[18] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[19] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[20] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[21] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[22] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[23] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[24] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[25] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[26] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[27] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
    dof_coordinates[28] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
    dof_coordinates[29] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
    dof_coordinates[30] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
    dof_coordinates[31] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
    dof_coordinates[32] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
    dof_coordinates[33] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
    dof_coordinates[34] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
    dof_coordinates[35] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
    dof_coordinates[36] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
    dof_coordinates[37] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
    dof_coordinates[38] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
    dof_coordinates[39] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
    dof_coordinates[40] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
    dof_coordinates[41] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
    dof_coordinates[42] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[43] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[44] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[45] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[46] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[47] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[48] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[49] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[50] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[51] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[52] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[53] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[54] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[55] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[56] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[57] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[58] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[59] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[60] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[61] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[62] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[63] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[64] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[65] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[66] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[67] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[68] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[69] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[70] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[71] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    dof_coordinates[72] = vertex_coordinates[0];
    dof_coordinates[73] = vertex_coordinates[1];
    dof_coordinates[74] = vertex_coordinates[2];
    dof_coordinates[75] = vertex_coordinates[3];
    dof_coordinates[76] = vertex_coordinates[4];
    dof_coordinates[77] = vertex_coordinates[5];
    dof_coordinates[78] = 0.857142857142857*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[79] = 0.857142857142857*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[80] = 0.714285714285714*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[81] = 0.714285714285714*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[82] = 0.571428571428571*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[83] = 0.571428571428571*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[84] = 0.428571428571429*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[85] = 0.428571428571429*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[86] = 0.285714285714286*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[87] = 0.285714285714286*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
    dof_coordinates[88] = 0.142857142857143*vertex_coordinates[2] + 0.857142857142857*vertex_coordinates[4];
    dof_coordinates[89] = 0.142857142857143*vertex_coordinates[3] + 0.857142857142857*vertex_coordinates[5];
    dof_coordinates[90] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[91] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[92] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[93] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[94] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[95] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[96] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[97] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[98] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[99] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[5];
    dof_coordinates[100] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[4];
    dof_coordinates[101] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[5];
    dof_coordinates[102] = 0.857142857142857*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2];
    dof_coordinates[103] = 0.857142857142857*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3];
    dof_coordinates[104] = 0.714285714285714*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2];
    dof_coordinates[105] = 0.714285714285714*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3];
    dof_coordinates[106] = 0.571428571428571*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2];
    dof_coordinates[107] = 0.571428571428571*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3];
    dof_coordinates[108] = 0.428571428571429*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2];
    dof_coordinates[109] = 0.428571428571429*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3];
    dof_coordinates[110] = 0.285714285714286*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2];
    dof_coordinates[111] = 0.285714285714286*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3];
    dof_coordinates[112] = 0.142857142857143*vertex_coordinates[0] + 0.857142857142857*vertex_coordinates[2];
    dof_coordinates[113] = 0.142857142857143*vertex_coordinates[1] + 0.857142857142857*vertex_coordinates[3];
    dof_coordinates[114] = 0.714285714285714*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[115] = 0.714285714285714*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[116] = 0.571428571428571*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[117] = 0.571428571428571*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[118] = 0.428571428571429*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[119] = 0.428571428571429*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[120] = 0.285714285714286*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[121] = 0.285714285714286*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[122] = 0.142857142857143*vertex_coordinates[0] + 0.714285714285714*vertex_coordinates[2] + 0.142857142857143*vertex_coordinates[4];
    dof_coordinates[123] = 0.142857142857143*vertex_coordinates[1] + 0.714285714285714*vertex_coordinates[3] + 0.142857142857143*vertex_coordinates[5];
    dof_coordinates[124] = 0.571428571428572*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[125] = 0.571428571428572*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[126] = 0.428571428571429*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[127] = 0.428571428571429*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[128] = 0.285714285714286*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[129] = 0.285714285714286*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[130] = 0.142857142857143*vertex_coordinates[0] + 0.571428571428571*vertex_coordinates[2] + 0.285714285714286*vertex_coordinates[4];
    dof_coordinates[131] = 0.142857142857143*vertex_coordinates[1] + 0.571428571428571*vertex_coordinates[3] + 0.285714285714286*vertex_coordinates[5];
    dof_coordinates[132] = 0.428571428571429*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[133] = 0.428571428571429*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[134] = 0.285714285714286*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[135] = 0.285714285714286*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[136] = 0.142857142857143*vertex_coordinates[0] + 0.428571428571429*vertex_coordinates[2] + 0.428571428571429*vertex_coordinates[4];
    dof_coordinates[137] = 0.142857142857143*vertex_coordinates[1] + 0.428571428571429*vertex_coordinates[3] + 0.428571428571429*vertex_coordinates[5];
    dof_coordinates[138] = 0.285714285714286*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[139] = 0.285714285714286*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[140] = 0.142857142857143*vertex_coordinates[0] + 0.285714285714286*vertex_coordinates[2] + 0.571428571428571*vertex_coordinates[4];
    dof_coordinates[141] = 0.142857142857143*vertex_coordinates[1] + 0.285714285714286*vertex_coordinates[3] + 0.571428571428571*vertex_coordinates[5];
    dof_coordinates[142] = 0.142857142857143*vertex_coordinates[0] + 0.142857142857143*vertex_coordinates[2] + 0.714285714285714*vertex_coordinates[4];
    dof_coordinates[143] = 0.142857142857143*vertex_coordinates[1] + 0.142857142857143*vertex_coordinates[3] + 0.714285714285714*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_081688551401288f138086b201f6c314aed48e94_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_081688551401288f138086b201f6c314aed48e94_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_081688551401288f138086b201f6c314aed48e94_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W64[64] = {0.00225490635804067, 0.00461192269546131, 0.00569439870231093, 0.00536750948658183, 0.00400862976569763, 0.00229987790174679, 0.000903105459518999, 0.000166783703247789, 0.00495362697982869, 0.0101315713673239, 0.0125095780341758, 0.011791460746211, 0.00880624443170159, 0.00505242143815854, 0.00198396157514547, 0.000366394040824771, 0.00698794170371612, 0.0142923216403241, 0.0176469084969194, 0.016633880716434, 0.0124227203558096, 0.00712730825639973, 0.00279871857246886, 0.000516861727436939, 0.00807892713920297, 0.016523696115099, 0.020402014502064, 0.0192308287687631, 0.0143622051929694, 0.00824005215605507, 0.00323566572086397, 0.000597556249615681, 0.00807892713920296, 0.0165236961150989, 0.020402014502064, 0.0192308287687631, 0.0143622051929694, 0.00824005215605507, 0.00323566572086397, 0.000597556249615681, 0.00698794170371612, 0.0142923216403241, 0.0176469084969194, 0.016633880716434, 0.0124227203558096, 0.00712730825639973, 0.00279871857246886, 0.000516861727436939, 0.00495362697982869, 0.0101315713673239, 0.0125095780341758, 0.011791460746211, 0.00880624443170159, 0.00505242143815854, 0.00198396157514547, 0.000366394040824771, 0.00225490635804067, 0.00461192269546132, 0.00569439870231094, 0.00536750948658184, 0.00400862976569764, 0.00229987790174679, 0.000903105459519001, 0.000166783703247789};
    // Quadrature points on the UFC reference element: (0.0195020502602501, 0.0177799151473634), (0.0180418349638001, 0.0913236078997939), (0.0155999615159342, 0.214308479395631), (0.01247033193684, 0.371932164583272), (0.00903035100664362, 0.545186684803427), (0.00569492613313233, 0.71317524285557), (0.00286640239202857, 0.855633742957854), (0.000886210384823616, 0.95536604471003), (0.0998591349040865, 0.0177799151473634), (0.0923821858484057, 0.0913236078997939), (0.0798787122753652, 0.214308479395631), (0.0638536226992409, 0.371932164583272), (0.0462393967490529, 0.545186684803427), (0.0291605441175791, 0.71317524285557), (0.0146772497934947, 0.855633742957854), (0.00453778967803614, 0.95536604471003), (0.233015798295905, 0.0177799151473634), (0.215568748962855, 0.0913236078997939), (0.186392581165165, 0.214308479395631), (0.148998916139621, 0.371932164583272), (0.107897088799642, 0.545186684803427), (0.0680445256493261, 0.71317524285557), (0.0342485550340933, 0.855633742957854), (0.0105886826011672, 0.95536604471003), (0.401023447367823, 0.0177799151473634), (0.370996831485534, 0.0913236078997939), (0.320784238705222, 0.214308479395631), (0.256429218282022, 0.371932164583272), (0.185692398660614, 0.545186684803427), (0.11710558017937, 0.71317524285557), (0.0589422421465923, 0.855633742957854), (0.0182232708290937, 0.95536604471003), (0.581196637484813, 0.0177799151473634), (0.537679560614672, 0.0913236078997939), (0.464907281899148, 0.214308479395631), (0.371638617134706, 0.371932164583272), (0.269120916535959, 0.545186684803427), (0.16971917696506, 0.71317524285557), (0.0854240148955533, 0.855633742957854), (0.0264106844608761, 0.95536604471003), (0.749204286556732, 0.0177799151473634), (0.693107643137351, 0.0913236078997939), (0.599298939439204, 0.214308479395631), (0.479068919277106, 0.371932164583272), (0.346916226396932, 0.545186684803427), (0.218780231495104, 0.71317524285557), (0.110117702008052, 0.855633742957854), (0.0340452726888027, 0.95536604471003), (0.88236094994855, 0.0177799151473634), (0.8162942062518, 0.0913236078997939), (0.705812808329004, 0.214308479395631), (0.564214212717487, 0.371932164583272), (0.408573918447521, 0.545186684803427), (0.257664213026851, 0.71317524285557), (0.129689007248651, 0.855633742957854), (0.0400961656119337, 0.95536604471003), (0.962718034592386, 0.0177799151473634), (0.890634557136406, 0.0913236078997939), (0.770091559088435, 0.214308479395631), (0.615597503479888, 0.371932164583272), (0.44578296418993, 0.545186684803427), (0.281129831011298, 0.71317524285557), (0.141499854650117, 0.855633742957854), (0.0437477449051463, 0.95536604471003)
    
    // Values of basis functions at quadrature points.
    static const double FE0_C0[64][72] = \
    {{0.478646224257126, 0.013750128920036, 0.0129456047662751, -0.00204303904989246, -0.0011033837165209, -0.000892734842534802, -0.000896493153717245, -0.00111867637279987, -0.00210547875679016, 0.564261658937412, -0.85225968886445, 0.972637415487377, -0.748017850187844, 0.367034077714178, -0.103936885792195, 0.618915171491206, -0.921937268806352, 1.04539394481717, -0.800601644335545, 0.391613737263943, -0.110623167906396, 0.265768782876855, -0.209460871729459, 0.139190367774703, -0.0630777716964546, 0.016985464459361, -0.212385111940278, 0.098095859280127, -0.038573372793018, 0.0096230871522658, 0.142046573341628, -0.0388229051242315, 0.00840397231947131, -0.0646431355842638, 0.00972611336402975, 0.0174612964295839, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0573466318111094, 0.0130724452826474, 0.0115472196984921, -0.00995918232739881, -0.00221143145035102, -0.00129469931920238, -0.00106358842486595, -0.00114460957150839, -0.00190427601040025, 1.09459087571854, -0.95960035086131, 0.973965459019147, -0.710871974320419, 0.338517169380733, -0.0940045191961649, 0.216246690059207, -0.459162023935281, 0.641722637530172, -0.570151819757309, 0.312948138520666, -0.0971270424547429, 0.671910094107584, -0.656822467526056, 0.507328309984254, -0.258224052114148, 0.0764386635634815, -0.271187758635746, 0.146509779718407, -0.0648294224029616, 0.017795667483857, 0.15211881654906, -0.0470808083831602, 0.0112352821598034, -0.0636055796787632, 0.0106167288015675, 0.0163349969810636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0126008532446806, 0.0118257386006729, -0.00439389496144264, -0.0210809128006084, 0.00646754018849043, 0.00138477915020759, 0.000718468195383806, 0.0005699351831557, 0.000746400881369378, 0.217151131667989, 0.83409212655266, -0.499665468155438, 0.313480194113941, -0.138672991396936, 0.0368460536169568, 0.0158068841079711, -0.108135959117463, 0.245047084198727, -0.296314755168379, 0.204014796955129, -0.0757517063786275, 0.36421446274714, -0.583260456299224, 0.61508137649704, -0.393305599333346, 0.139412314688866, 0.327484380161519, -0.244054364171968, 0.136097590183692, -0.0448033622091231, -0.0912949062448062, 0.0359779445015883, -0.0103291081331104, 0.0302880372366744, -0.0061450235308447, -0.00689787828317755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00308900434567194, 0.0100093864027661, 0.00225295454211697, -0.0308518253866036, 0.0302104346035001, -0.00776647045401415, -0.00105716416961861, -0.000463103648668202, -0.000405320080260303, -0.0332951985492181, 0.231854390775544, 0.754300698505448, -0.228433582910895, 0.0828869306578106, -0.0200086117019644, -0.00111633845455917, -0.00442471729325538, 0.0456213297222869, -0.101499672367412, 0.103189386643709, -0.0510638995341272, 0.0252432691456129, -0.186295502757192, 0.362902123098769, -0.343312337352019, 0.162370108978457, 0.327300330764809, -0.456360391057467, 0.378005642252973, -0.166358296622195, 0.201177939389621, -0.119273799932296, 0.0459601751690627, -0.0259059186797849, 0.00714512743563529, 0.00437291851775512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.000843644498790086, 0.00771091076502107, -0.00150127135435969, -0.0346972847643059, 0.059381651297613, -0.04566129764928, 0.0126919727530948, 0.000722256556864073, 0.000304206357871151, 0.0078267383069966, -0.0351831931352399, 0.121095459563477, 0.820471709122038, -0.0807055787864028, 0.0150171363036922, 0.000129640352780832, 0.000193845528593811, 0.000711444736713764, -0.0173418745476637, 0.0365582054300664, -0.0283709395014871, -0.00157938480981872, -0.00420555892961092, 0.0901419155215644, -0.177196922901248, 0.131590279977387, 0.012643362172714, -0.19661471646487, 0.339854954079633, -0.235343281439289, 0.254139904633157, -0.318713771258713, 0.194069469745415, 0.138861910930067, -0.0613465170061729, -0.00481173708750914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.000310977142728246, 0.00515876269448829, 0.000183227811445349, -0.0302469615867046, 0.0730339285435655, -0.0919724716705903, 0.0618991977460593, -0.0188001399423872, -5.07355907654813e-05, 0.00269519667886807, -0.0106459557057951, 0.0261267089271655, -0.0504319075376956, 0.935581938134158, -0.00250456067819432, 2.1521983767961e-05, 2.04453162195365e-05, 3.28689240717218e-05, 9.4271195377107e-05, 0.00697998655835399, -0.0119231889842781, -0.000212610931902828, -0.000251139452739009, -0.000635948152897865, -0.043995559131746, 0.0720019792098495, 0.00104423345540385, 0.00194286250136703, 0.118670408725521, -0.181463628337161, -0.0040365725793592, -0.181155212175454, 0.244574529626103, 0.187943391387177, -0.186434013292299, 0.0770661234737368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000228964365082614, 0.00272807288411623, -0.00147043437734157, -0.0191268510321429, 0.0574900271389923, -0.0960454483499846, 0.0963516729570883, -0.0580884185907878, 0.0195505393885585, -0.00191627313076539, 0.00715384968413652, -0.015805403586188, 0.0235129244708125, -0.0278023274775148, 0.965111698729285, -6.41958072710586e-06, -4.70689967805487e-06, -5.16107499904956e-06, -7.65347657979542e-06, -1.81041961448726e-05, -0.0031630901226576, 5.75378368038622e-05, 4.68377899894915e-05, 6.1531552693346e-05, 0.000136225745874699, 0.0228257506849951, -0.000238479206512571, -0.000232589247686189, -0.000456177484500803, -0.071538619055358, 0.000631266217376303, 0.000919166943444724, 0.127697970618753, -0.00140202688003008, -0.144605088345564, 0.117429235107159, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0189862680714027, 0.000872818017149936, 0.406799414567345, -0.00681691044346666, 0.0232918598407952, -0.0455631809825572, 0.0561217395764355, -0.0453899894472405, 0.0256921926747942, -0.156101074260151, 0.567455617206899, -1.20021306161591, 1.64300121306148, -1.5642073459374, 1.26829420015707, -0.000144801454748648, -9.19750938469218e-05, -8.27428489661242e-05, -9.19587200980368e-05, -0.000130099835559296, -0.000312157272883205, 0.00123785735700528, 0.000832604457127063, 0.000821671967709922, 0.00108925273390784, 0.00250819736339561, -0.00476504958696736, -0.00351588824624165, -0.00413868660890791, -0.00892980444797548, 0.0110558816866091, 0.00973035668755956, 0.0186425561037011, -0.0180526373492451, -0.025859805538303, 0.0279734681600737, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0380448638347132, 0.00940495437832264, 0.0129456047662751, -0.00154570209461198, -0.000943963718433364, -0.000893895663951091, -0.00111710075866193, -0.00199665599129788, -0.0107809837635666, 0.187763650165902, -0.419186504212878, 0.602030537374058, -0.544986219216521, 0.303426707344365, -0.095261380785419, 1.05455597040804, -0.809348369920049, 0.806293017072705, -0.584055855246756, 0.276970850992035, -0.0767083058178312, 0.669340093966495, -0.231403133541958, 0.126365380883712, -0.0522141369596136, 0.0133184391525998, -0.673130310092111, 0.127562497868834, -0.0397356571322894, 0.00883132640500379, 0.529921876252883, -0.0572841174236609, 0.00959792064238015, -0.273638598761574, 0.0159105531749617, 0.0819466464178949, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0188544332425243, 0.0112832406388045, 0.0115472196984921, -0.00943168755703891, -0.00234464757732768, -0.00158571154941841, -0.00159070456842513, -0.00237013457984219, -0.0097507365881827, 0.295064434623244, -0.44718963284104, 0.591681610082054, -0.514654657963259, 0.279416818722859, -0.0861580586183822, 0.298484675140401, -0.443080792248771, 0.583052688178238, -0.50555719960269, 0.273872425019418, -0.0843049468264087, 1.60331930673077, -0.826243677853532, 0.549325220444028, -0.261050064355966, 0.0742787093747517, -0.843571941003992, 0.219637637544498, -0.0800313092003948, 0.0199763769301516, 0.563916732390121, -0.0804695156812487, 0.0154009347841394, -0.26882805258561, 0.0201490014948138, 0.0766608726472714, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00130297045014866, 0.0143003319812393, -0.00439389496144261, -0.0276003684898161, 0.00932563738090631, 0.00225784032626304, 0.0013873863848142, 0.0014442505106935, 0.00382190309790661, -0.0129165577253314, 0.326772886775825, -0.289387629599624, 0.223650044691117, -0.114073133196681, 0.0337705514004198, -0.00481435919399677, -0.107354237558162, 0.274056461265551, -0.344686972704913, 0.241987282169664, -0.0909002464561825, 0.730628667473462, -0.856012726582406, 0.847386108577653, -0.527514406821329, 0.184241600735625, 0.971177796005054, -0.441227449248379, 0.216188108607859, -0.0669530688159948, -0.333513146140757, 0.0749971734901782, -0.0182809969576195, 0.127576341799983, -0.0142720968607594, -0.0323720518109703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.000465403488335705, 0.0174686241890843, 0.00225295454211695, -0.0573309210233544, 0.0605739575993446, -0.017148725693909, -0.00266313074382256, -0.00143680724775275, -0.00207541832955841, 0.00413646705711202, -0.018942196307939, 0.37729294503593, -0.157543173780247, 0.0677112502621288, -0.0183385134526664, 0.000710152097409061, 0.00112155569091887, 0.0574846864797376, -0.154565455553942, 0.169020266588183, -0.0869699465379746, -0.0105601025116399, -0.289105832222494, 0.630491448768184, -0.619259025371126, 0.298388602481125, 0.838278150962802, -0.976490201295283, 0.77789881605454, -0.336666416296301, 0.71044019071352, -0.302301385849418, 0.106115518471697, -0.108363070170095, 0.0203178363695022, 0.0205223025125213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000973356784444778, 0.0190159034833559, -0.00150127135435973, -0.0894934171512663, 0.161691687766998, -0.133141009501566, 0.0406093961418993, 0.00267000980539325, 0.00155767128706485, -0.00828106404313184, 0.0326946825276979, -0.0868194179864449, 0.506286463248135, -0.0648833714027978, 0.0137636713744985, -0.000702349152075833, -0.000665915345546298, -0.00163202791073834, -0.0312027118994789, 0.0800295075559868, -0.0670681752507128, 0.00751514487188463, 0.0111463864542091, 0.177974133909415, -0.415383865609225, 0.328402463969078, -0.0464150814640352, -0.44850789210173, 0.874220240380368, -0.628944860598737, 0.802995470720637, -0.947222583895683, 0.569117305697112, 0.571637244601804, -0.207854028192811, -0.022581697719644, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0019902450565571, 0.0170766261155937, 0.000183227811445315, -0.102961606182754, 0.257124698527092, -0.337811943545342, 0.240710935494929, -0.0797960856157471, -0.00025978869580915, 0.0165739924322361, -0.0621025149754161, 0.141010282512099, -0.234817846211765, 0.711969237222367, -0.00229550757315047, 0.000677682858969407, 0.000506219500461435, 0.00068986222428114, 0.00161221093137413, 0.0187004957407519, -0.0371991617696023, -0.00635064230911863, -0.00575309472717408, -0.0115148481653329, -0.122971758611372, 0.232332914196243, 0.0288583307705498, 0.0383962027987863, 0.351182316028277, -0.610877183966388, -0.0962378692116444, -0.585127809893798, 0.871704322266549, 0.732342077008643, -0.725258497988565, 0.361674770058887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0024445934780121, 0.011316360757626, -0.00147043437734161, -0.0804526857721969, 0.245900934926361, -0.419528198446365, 0.432875581647161, -0.272343914583297, 0.100107420717142, -0.0201273753315651, 0.0736216368571181, -0.158307468628364, 0.226199833492627, -0.247218257617762, 0.884554817400702, -0.000345258140951302, -0.000227106059888905, -0.000232241492134741, -0.000321609418311682, -0.000688567149335053, -0.012194270076604, 0.00303198268350945, 0.00219948159309915, 0.00265942247531202, 0.00529106321232335, 0.0894828705869661, -0.0122307717259141, -0.0104906739243829, -0.0182237211382553, -0.286399393165856, 0.031096084553263, 0.0383196828610069, 0.525817451503859, -0.0638356455838559, -0.621382287353626, 0.551100661239915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0188020749954233, 0.00419482470538202, 0.406799414567345, -0.0329028675523159, 0.113000144935348, -0.222473029663851, 0.276387492673488, -0.226438945814253, 0.131555405716669, -0.153895792551867, 0.556408957920233, -1.16876062678566, 1.58490607884513, -1.48646566070936, 1.1624309871152, -0.00073097295303919, -0.000449907772619317, -0.000396812145152653, -0.000433133622419615, -0.000599807842468213, -0.00138091450265584, 0.00621498871030111, 0.0040447994937503, 0.00390347479753897, 0.00505420148370643, 0.0111527947944146, -0.0237597669404013, -0.0169196646903388, -0.0193691411275168, -0.0399624819397217, 0.0546092934506973, 0.0461296716088448, 0.0841472432693764, -0.0878433208703404, -0.118239740897916, 0.131280739299054, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00739147825747418, -0.00359604803774387, 0.0129456047662751, 0.000717100783397017, 0.000559101919707802, 0.000737770718842175, 0.0015497889256685, 0.00976922031257087, -0.0251568325771658, 0.00852280133621238, -0.0915852190502786, 0.230054181864113, -0.294743047020546, 0.211246100197909, -0.0808855319718201, 0.111696109942884, 0.865187529320796, -0.427449404394959, 0.260703591679881, -0.114210134327397, 0.0302169597751986, 0.341242020148123, 0.432650793917239, -0.0948126675187082, 0.0300025096350908, -0.00669796672882824, -0.600217046341821, -0.33754969599581, 0.0383791632509461, -0.00618891466462056, 0.668755650000597, 0.195130779881564, -0.0113060612834047, -0.444538951879176, -0.0660991555877431, 0.162361377260483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00283893426243661, -0.004357228357771, 0.011547219698492, 0.00434154786331089, 0.00134586543554707, 0.00122531250484267, 0.00194004118943231, 0.00796706488508583, -0.0227528074647437, -0.0110636734133892, -0.0807651740252507, 0.215046525011704, -0.27415517388502, 0.193851849610704, -0.0731559877418216, -0.0261157250737919, 0.268992813570382, -0.258448241827091, 0.208100687233416, -0.109066098793025, 0.032950516041913, 0.675693896752866, 1.00943382824112, -0.356887633517212, 0.1399470945093, -0.0362028190297408, -0.715424899281766, -0.393289769872555, 0.0677171620594397, -0.0131067004635195, 0.700959759958008, 0.187661049327416, -0.0159485967763227, -0.435200673594057, -0.0575086073328367, 0.151888642294499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00197738145155587, -0.00434826354308827, -0.00439389496144262, 0.00972506232070785, -0.00394891687618873, -0.00122055946612845, -0.00107986586631297, -0.00232965271374459, 0.00891820064557561, -0.0115045850640763, 0.0214464136483399, -0.0915786531546617, 0.114931168425819, -0.07853234326005, 0.0286742538527507, -0.0100059937496387, 0.0113651850183469, -0.0675035667575721, 0.0957545501018973, -0.0705435312272386, 0.0271954686590868, 0.111893005514226, 0.436961492292215, -0.338939791766795, 0.196320308890674, -0.0662431750190943, 0.717150989022612, 0.36574635782409, -0.115842887272116, 0.0307319543585345, -0.39992574024808, -0.0832834556102042, 0.0120816495975147, 0.204942909846688, 0.0195474636089611, -0.0641389385231633, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00211066058572794, -0.000966471894999994, 0.00225295454211697, 0.00355328026085932, -0.00431975992871985, 0.00146943810097255, 0.000297696979547082, 0.000260641409665703, -0.00484287450842215, 0.014534611810255, -0.0424652905770616, 0.0660690246195588, -0.0741046906405278, 0.0458751442593115, -0.0155710572738028, 0.00582267846789949, -0.000456109918238861, -0.00112526113200091, 0.00622985572984251, -0.00816637003199272, 0.00457681883029905, -0.0552420095552869, 0.00918376938559293, -0.0331518103333866, 0.0359507866547565, -0.0180679910449843, 0.342534977240919, 0.0833218499427753, -0.0589144273331844, 0.0244947613724358, 0.779778394621047, 0.0371536643996277, -0.0100719790633857, -0.171315034703523, -0.00312950996015848, 0.0406609598579203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00243271802271119, 0.00740167678812127, -0.00150127135435972, -0.0377006726019649, 0.075041452138999, -0.0700102954072211, 0.0254596876806581, 0.00225437218408513, 0.00363474026473941, -0.0181958325136244, 0.0597822181908072, -0.115152061197742, 0.16445354079855, -0.0423081796878003, 0.0116866023968238, -0.00360111024577526, -0.00102807946503183, -0.00135709099241917, -0.00532953500101828, 0.0242189110331137, -0.0239899018744664, 0.0320648952277751, 0.012482503694319, 0.0362435175925443, -0.14242644038768, 0.129411811389595, -0.143651951607918, -0.123006982040073, 0.357386653157187, -0.280812613328441, 0.608635915000899, -0.521501710217866, 0.302957916855986, 0.869779198030629, -0.149013350710809, -0.0447412518133334, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00425137917898673, 0.0167565561316648, 0.000183227811445297, -0.106010269673274, 0.280667233736476, -0.397225820514663, 0.313574334492999, -0.122519870870591, -0.000606202631341049, 0.0332473233807808, -0.114801254228948, 0.231926296240728, -0.314632403374344, 0.399779422492618, -0.00194909363761857, 0.00317214930161709, 0.0014368163401032, 0.00147810832393905, 0.00254013430324977, 0.0114619958164061, -0.0325206904927211, -0.0273938242113581, -0.0145286639160788, -0.0200990370917976, -0.0811945841203714, 0.215334012264826, 0.110756184042016, 0.0789924469244453, 0.256883692009512, -0.609916453300601, -0.300895653072878, -0.504469471678579, 0.964201631153255, 0.959556965042441, -0.945522227857854, 0.716588370043479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00685856376597518, 0.0181171337236427, -0.00147043437734164, -0.131865558309645, 0.414642125258716, -0.733188775226241, 0.794063231537647, -0.538467511212326, 0.233595159583084, -0.0549900225212121, 0.194626000527733, -0.400746192134264, 0.537420610966995, -0.521893013062616, 0.75106707853476, -0.00220109226423602, -0.00118704160578887, -0.00107844949589943, -0.00133538177988041, -0.00245109691066463, -0.0169707335347361, 0.0187033617242704, 0.0110085510610679, 0.011590478638455, 0.0195208418036531, 0.128117107050858, -0.0722469351146293, -0.049279609204271, -0.0705716060906866, -0.424991963547791, 0.172395257095943, 0.159942793521878, 0.818994468586084, -0.314457359864442, -1.04316900043789, 1.0918990133138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0180839093892028, 0.0087927090708985, 0.406799414567345, -0.0694601616527206, 0.240602121904114, -0.478804608828334, 0.603450004922119, -0.505268286600481, 0.306977302704, -0.146929444559865, 0.526496842949826, -1.09347628844525, 1.46007409911639, -1.33646288912419, 0.987009090127867, -0.00162847451175895, -0.000949939770108365, -0.000810572121070368, -0.000858764763552382, -0.00114824513847753, -0.00247527129268314, 0.0137227000166991, 0.00844406779118306, 0.00785137380335922, 0.00977992505666846, 0.0201631387202039, -0.0518708710671327, -0.0347803568705712, -0.0380220295914485, -0.0730276591671854, 0.117391186136655, 0.0925450728990588, 0.155997190117276, -0.184292786273571, -0.224020808014577, 0.260107308500106, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000673476904029849, 0.00130842233900841, 0.0129456047662751, -0.000357023761018412, -0.000427650058470702, -0.00112068372230397, -0.0167114736630792, 0.0481433641804237, -0.0432952606592747, -0.00030375678114219, -0.00085641264474454, 0.0391517934723864, -0.105377248020119, 0.118467931677203, -0.0627471038897112, -0.00685119082543919, 0.039869837392001, 0.784419607467857, -0.141583272882053, 0.0489907739717661, -0.0116705286659852, 0.00549167194466061, 0.362857049536412, 0.365520588898824, -0.0255582632571284, 0.00397432499191755, -0.175798130964403, -0.594726836203326, -0.232086459595813, 0.0072928785848826, 0.411486078891195, 0.539280128111155, 0.0945750044292787, -0.429048439156668, -0.252694204721931, 0.216765401913336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00181579466682024, 0.00227148999153141, 0.011547219698492, -0.0029869309892662, -0.00134516834301434, -0.00217437439505593, -0.0127365724325051, 0.0430209364968404, -0.0391578998228303, 0.00363351425302825, 0.00318076969376636, 0.0305348197291152, -0.0943816122171715, 0.107903155724677, -0.0567508953837351, 0.0147609397617144, -0.0572045106770045, 0.240922927935829, -0.127131133536057, 0.0606776810152985, -0.0175859427680214, -0.0457975754641772, 0.773966729272973, 0.806610858159013, -0.138234212577426, 0.0280698587521084, -0.174828157865077, -0.731114001346955, -0.247459747413697, 0.0180427891268706, 0.415306216222047, 0.564052909027592, 0.081224479441951, -0.416906009332956, -0.240900219639851, 0.202783464568771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00165975606835027, 0.00186497367868487, -0.00439389496144259, -0.00521620724673398, 0.00284145043337728, 0.00134916315551719, 0.00268191124547691, -0.0163860680005424, 0.015348348023446, 0.00634796727115723, -0.00545641507350229, -0.00609611655494563, 0.0359471924273124, -0.0429842625815265, 0.0222441064748803, 0.00950185384239925, -0.0203382134112979, 0.0111599003886893, -0.03310488654923, 0.0277830686768159, -0.0113157106043615, -0.0489936799004549, 0.204590632025498, 0.263283898791194, -0.118776816861938, 0.036976523089134, 0.0821587854946919, 0.804619832077767, 0.157472559125198, -0.0263523013522615, -0.215273668186551, -0.320629316506442, -0.0232768207891381, 0.193053740970258, 0.106658831372108, -0.085630603914889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00225886333874666, -0.00207842784617615, 0.00225295454211699, 0.00900801783786845, -0.0135206897789807, 0.00616787083288028, 0.00202938990826883, 0.00829479383766051, -0.0083346547519109, -0.012113194969103, 0.0242946497179606, -0.0174736276902309, -0.0173835330910673, 0.0242163238231735, -0.0120792770303141, -0.00835146140238997, 0.00830439958943138, 0.00202875483922224, 0.00613414889140211, -0.0134927062052443, 0.00900090826008865, 0.0543914215410206, -0.07729801345063, -0.0530140114088143, 0.079656852861345, -0.04387043523388, -0.155910192222399, 0.622033012730097, -0.212003729581142, 0.0797590598516272, 0.31480958526962, 0.624158094191803, -0.0532633799262504, -0.155636211344298, -0.0772611837975663, 0.0542856278660637, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00116253475539868, -0.00432277177226667, -0.00150127135435971, 0.0245692337735207, -0.0561013256006577, 0.0628959488088609, -0.0301986844602982, -0.00475378226013955, 0.00625543882394321, 0.00754493834069023, -0.0204568169044419, 0.029263672696878, -0.0214021933593832, -0.0203081336513588, 0.00906590383761996, 0.00256983110057908, -0.000741833404986641, -0.000409073206523876, -0.000623110595850736, -0.0086910485943459, 0.0121281294940286, -0.0188834028024413, 0.00668917389612507, 0.00559474566647395, 0.0614181959733819, -0.0750531024467853, 0.0628279724060607, -0.0337565835979057, -0.203478700176064, 0.195704230383569, -0.136319200417332, 0.527855532958427, -0.278766189012778, 0.718520376204176, 0.243759577414532, -0.0597331434055493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00336360204889351, 0.00519578311063039, 0.000183227811445308, -0.0350502981129147, 0.100421053627562, -0.157472695738426, 0.143891633975703, -0.0725804522282778, -0.00104328320569606, 0.0244272410753743, -0.07674708284605, 0.136111585237663, -0.149652460376538, 0.109725685977479, -0.00151201306326373, 0.004011028519245, 0.000569022765284002, 0.000398058037296896, 0.000478966219249063, 0.00112559245531761, -0.00834115851285726, -0.0315175396459822, -0.00505107615622615, -0.00438682894443643, -0.00883451518126387, 0.0597679735981764, 0.111865838683756, 0.0222576403217614, 0.0323533635459341, -0.187568964150062, -0.246309252625379, -0.08202304681843, 0.343230392072434, 0.453255444646885, -0.434517949942807, 0.956702687916306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0129955111573352, 0.0181610340178306, -0.00147043437734167, -0.136274456001437, 0.444651915638481, -0.824138336132289, 0.952193274041696, -0.716009562344314, 0.402020536244866, -0.100860288373606, 0.342957061155888, -0.670288304654795, 0.834203794881043, -0.710224310882619, 0.582641701872978, -0.00694798631917105, -0.00278140447737607, -0.00216302765356282, -0.00232995534844937, -0.00357701927019317, -0.0136052502080008, 0.0567208804039802, 0.0244839630788086, 0.0215739285633946, 0.0298604880941461, 0.106580243682161, -0.207967784178178, -0.101714862270763, -0.11516329317475, -0.370585025341606, 0.460540210841393, 0.289426335398095, 0.761857646390994, -0.73647873972847, -1.07606084699196, 1.45777236226579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0163211681547544, 0.0131593584144996, 0.406799414567345, -0.104901626844077, 0.367352842108803, -0.741130753880073, 0.951444970892057, -0.819381641467322, 0.528312230734258, -0.131388710639438, 0.465583830065908, -0.953421402057858, 1.24889678784095, -1.10950625011425, 0.765674162097609, -0.00250619338119211, -0.00136226743931284, -0.00111431908505601, -0.00113700501698894, -0.00145543031218936, -0.00289996047206401, 0.0208845963646415, 0.0119396453442561, 0.0105886278800223, 0.0125673841085788, 0.0238816829615448, -0.077836530064568, -0.0482447293488609, -0.0497680385232163, -0.0876893260804621, 0.172811063022882, 0.124592052384052, 0.190801592410399, -0.26330892774801, -0.281822321234635, 0.347264024357007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00130842233900868, 0.000673476904029651, 0.0129456047662751, -0.000303756781141447, -0.000856412644744328, 0.0391517934723869, -0.105377248020119, 0.118467931677203, -0.0627471038897113, -0.000357023761019211, -0.000427650058470458, -0.00112068372230467, -0.0167114736630791, 0.0481433641804239, -0.0432952606592746, -0.0116705286659855, 0.0489907739717665, -0.141583272882052, 0.784419607467856, 0.0398698373920007, -0.00685119082543896, 0.00397432499191803, -0.0255582632571289, 0.365520588898825, 0.362857049536413, 0.00549167194466017, 0.00729287858488225, -0.232086459595813, -0.594726836203328, -0.175798130964403, 0.0945750044292789, 0.539280128111155, 0.411486078891196, -0.252694204721932, -0.429048439156668, 0.216765401913336, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00227148999153172, -0.00181579466682049, 0.011547219698492, 0.00363351425302901, 0.00318076969376644, 0.0305348197291153, -0.0943816122171714, 0.107903155724677, -0.0567508953837352, -0.00298693098926705, -0.0013451683430142, -0.00217437439505624, -0.012736572432505, 0.0430209364968406, -0.0391578998228302, -0.0175859427680218, 0.0606776810152989, -0.127131133536057, 0.240922927935828, -0.0572045106770045, 0.0147609397617146, 0.0280698587521085, -0.138234212577427, 0.806610858159013, 0.773966729272975, -0.0457975754641776, 0.0180427891268704, -0.247459747413696, -0.731114001346956, -0.174828157865077, 0.0812244794419504, 0.564052909027592, 0.415306216222048, -0.240900219639851, -0.416906009332955, 0.202783464568771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0018649736786849, -0.00165975606835028, -0.00439389496144263, 0.00634796727115825, -0.00545641507350238, -0.00609611655494629, 0.0359471924273132, -0.0429842625815271, 0.0222441064748804, -0.00521620724673487, 0.00284145043337713, 0.00134916315551778, 0.00268191124547681, -0.016386068000542, 0.015348348023446, -0.0113157106043615, 0.0277830686768162, -0.0331048865492298, 0.0111599003886892, -0.020338213411298, 0.00950185384239941, 0.0369765230891343, -0.118776816861937, 0.263283898791193, 0.204590632025499, -0.0489936799004554, -0.0263523013522615, 0.157472559125198, 0.804619832077768, 0.0821587854946919, -0.0232768207891385, -0.320629316506443, -0.21527366818655, 0.106658831372108, 0.193053740970258, -0.0856306039148889, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00207842784617601, 0.0022588633387466, 0.00225295454211696, -0.0121131949691019, 0.0242946497179603, -0.0174736276902311, -0.017383533091067, 0.024216323823173, -0.012079277030314, 0.00900801783786762, -0.0135206897789811, 0.00616787083288115, 0.00202938990826851, 0.00829479383766112, -0.00833465475191098, 0.00900090826008857, -0.0134927062052439, 0.00613414889140239, 0.00202875483922204, 0.00830439958943116, -0.00835146140238978, -0.0438704352338796, 0.079656852861345, -0.0530140114088145, -0.0772980134506292, 0.0543914215410202, 0.0797590598516273, -0.212003729581142, 0.622033012730096, -0.155910192222399, -0.0532633799262503, 0.624158094191803, 0.314809585269621, -0.0772611837975666, -0.155636211344298, 0.0542856278660638, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00432277177226659, -0.00116253475539875, -0.00150127135435971, 0.00754493834069116, -0.0204568169044417, 0.029263672696877, -0.0214021933593825, -0.0203081336513595, 0.0090659038376202, 0.0245692337735197, -0.0561013256006578, 0.0628959488088619, -0.0301986844602986, -0.00475378226013874, 0.00625543882394297, 0.0121281294940287, -0.00869104859434549, -0.000623110595850272, -0.000409073206524177, -0.000741833404986923, 0.00256983110057903, -0.0750531024467848, 0.0614181959733819, 0.00559474566647404, 0.00668917389612484, -0.0188834028024416, 0.195704230383569, -0.203478700176063, -0.0337565835979056, 0.06282797240606, -0.278766189012778, 0.527855532958426, -0.13631920041733, 0.243759577414532, 0.718520376204175, -0.0597331434055491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00519578311063046, -0.00336360204889366, 0.000183227811445343, 0.0244272410753755, -0.0767470828460501, 0.136111585237663, -0.149652460376539, 0.109725685977479, -0.0015120130632635, -0.035050298112916, 0.100421053627563, -0.157472695738426, 0.143891633975704, -0.0725804522282778, -0.00104328320569642, -0.00834115851285734, 0.00112559245531811, 0.000478966219249351, 0.000398058037296737, 0.000569022765283625, 0.00401102851924511, 0.0597679735981771, -0.00883451518126454, -0.00438682894443644, -0.00505107615622659, -0.0315175396459825, -0.187568964150063, 0.0323533635459365, 0.0222576403217612, 0.111865838683756, 0.343230392072436, -0.0820230468184318, -0.24630925262538, -0.434517949942809, 0.453255444646888, 0.956702687916306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0181610340178307, 0.0129955111573351, -0.00147043437734165, -0.100860288373605, 0.342957061155887, -0.670288304654794, 0.834203794881042, -0.710224310882618, 0.582641701872978, -0.136274456001438, 0.444651915638483, -0.82413833613229, 0.952193274041697, -0.716009562344314, 0.402020536244865, -0.0136052502080012, -0.00357701927019239, -0.00232995534844964, -0.00216302765356249, -0.00278140447737679, -0.0069479863191705, 0.106580243682161, 0.0298604880941455, 0.0215739285633945, 0.0244839630788087, 0.0567208804039803, -0.370585025341608, -0.115163293174747, -0.101714862270764, -0.207967784178177, 0.761857646390995, 0.289426335398094, 0.460540210841392, -1.07606084699196, -0.736478739728466, 1.45777236226579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0131593584144997, 0.0163211681547543, 0.406799414567345, -0.131388710639437, 0.465583830065906, -0.953421402057856, 1.24889678784095, -1.10950625011425, 0.765674162097607, -0.104901626844079, 0.367352842108805, -0.741130753880077, 0.951444970892062, -0.819381641467326, 0.528312230734261, -0.00289996047206437, -0.00145543031218857, -0.0011370050169893, -0.00111431908505563, -0.00136226743931364, -0.00250619338119171, 0.0238816829615447, 0.012567384108579, 0.0105886278800223, 0.0119396453442559, 0.0208845963646419, -0.0876893260804627, -0.0497680385232156, -0.0482447293488618, -0.077836530064568, 0.1908015924104, 0.124592052384052, 0.172811063022882, -0.281822321234636, -0.26330892774801, 0.347264024357008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00359604803774349, -0.00739147825747415, 0.0129456047662751, 0.00852280133621312, -0.0915852190502784, 0.230054181864114, -0.294743047020546, 0.21124610019791, -0.0808855319718202, 0.000717100783396282, 0.000559101919707974, 0.000737770718841728, 0.0015497889256685, 0.0097692203125709, -0.0251568325771656, 0.0302169597751982, -0.114210134327396, 0.260703591679881, -0.42744940439496, 0.865187529320797, 0.111696109942884, -0.00669796672882832, 0.0300025096350895, -0.0948126675187071, 0.432650793917239, 0.341242020148122, -0.00618891466462041, 0.0383791632509465, -0.337549695995811, -0.600217046341821, -0.0113060612834054, 0.195130779881564, 0.668755650000596, -0.0660991555877429, -0.444538951879176, 0.162361377260482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0043572283577707, 0.00283893426243661, 0.011547219698492, -0.0110636734133885, -0.0807651740252508, 0.215046525011705, -0.274155173885019, 0.193851849610704, -0.0731559877418217, 0.00434154786331038, 0.00134586543554685, 0.00122531250484301, 0.00194004118943181, 0.00796706488508617, -0.0227528074647436, 0.0329505160419122, -0.109066098793024, 0.208100687233417, -0.258448241827091, 0.268992813570382, -0.0261157250737915, -0.0362028190297405, 0.139947094509298, -0.356887633517211, 1.00943382824112, 0.675693896752865, -0.0131067004635198, 0.0677171620594402, -0.393289769872556, -0.715424899281766, -0.0159485967763235, 0.187661049327416, 0.700959759958007, -0.0575086073328366, -0.435200673594057, 0.151888642294499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.00434826354308822, 0.0019773814515558, -0.00439389496144269, -0.0115045850640756, 0.0214464136483401, -0.0915786531546625, 0.114931168425821, -0.0785323432600507, 0.0286742538527508, 0.00972506232070719, -0.00394891687618906, -0.00122055946612775, -0.00107986586631287, -0.00232965271374399, 0.00891820064557557, 0.0271954686590867, -0.0705435312272379, 0.0957545501018977, -0.0675035667575722, 0.0113651850183469, -0.0100059937496384, -0.066243175019094, 0.196320308890674, -0.338939791766795, 0.436961492292214, 0.111893005514226, 0.0307319543585346, -0.115842887272117, 0.365746357824091, 0.717150989022611, 0.012081649597514, -0.0832834556102043, -0.39992574024808, 0.0195474636089619, 0.204942909846687, -0.0641389385231631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.000966471894999883, -0.00211066058572821, 0.00225295454211699, 0.0145346118102559, -0.0424652905770618, 0.0660690246195586, -0.0741046906405276, 0.0458751442593109, -0.0155710572738028, 0.00355328026085849, -0.00431975992872028, 0.0014694381009735, 0.000297696979546944, 0.000260641409666328, -0.00484287450842219, 0.0045768188302989, -0.00816637003199249, 0.00622985572984318, -0.00112526113200131, -0.000456109918238791, 0.00582267846789969, -0.0180679910449838, 0.0359507866547567, -0.0331518103333863, 0.00918376938559431, -0.0552420095552874, 0.0244947613724359, -0.058914427333184, 0.0833218499427749, 0.342534977240918, -0.0100719790633856, 0.0371536643996277, 0.779778394621048, -0.00312950996015859, -0.171315034703523, 0.0406609598579204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00740167678812134, 0.00243271802271098, -0.00150127135435968, -0.0181958325136236, 0.0597822181908074, -0.115152061197743, 0.164453540798551, -0.0423081796878009, 0.0116866023968241, -0.0377006726019661, 0.0750414521389992, -0.0700102954072207, 0.0254596876806582, 0.0022543721840857, 0.00363474026473923, -0.0239899018744666, 0.0242189110331143, -0.00532953500101802, -0.00135709099241908, -0.0010280794650321, -0.0036011102457751, 0.129411811389596, -0.142426440387681, 0.0362435175925449, 0.0124825036943193, 0.0320648952277746, -0.280812613328442, 0.35738665315719, -0.123006982040074, -0.143651951607918, 0.302957916855986, -0.521501710217868, 0.6086359150009, -0.149013350710809, 0.869779198030629, -0.044741251813333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0167565561316649, -0.00425137917898694, 0.000183227811445395, 0.0332473233807817, -0.114801254228947, 0.231926296240727, -0.314632403374344, 0.399779422492619, -0.00194909363761843, -0.106010269673275, 0.280667233736478, -0.397225820514664, 0.313574334493, -0.12251987087059, -0.000606202631341535, -0.0325206904927212, 0.0114619958164067, 0.00254013430324995, 0.00147810832393918, 0.00143681634010283, 0.00317214930161733, 0.215334012264827, -0.081194584120373, -0.0200990370917976, -0.0145286639160794, -0.0273938242113585, -0.609916453300603, 0.256883692009517, 0.0789924469244457, 0.110756184042015, 0.964201631153257, -0.504469471678583, -0.300895653072878, -0.945522227857855, 0.959556965042444, 0.716588370043479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0181171337236428, 0.00685856376597504, -0.00147043437734161, -0.0549900225212111, 0.194626000527732, -0.400746192134264, 0.537420610966995, -0.521893013062616, 0.75106707853476, -0.131865558309646, 0.414642125258718, -0.733188775226243, 0.794063231537649, -0.538467511212326, 0.233595159583083, -0.0169707335347365, -0.0024510969106639, -0.00133538177988052, -0.00107844949589918, -0.00118704160578944, -0.00220109226423557, 0.128117107050859, 0.0195208418036523, 0.0115904786384549, 0.0110085510610678, 0.0187033617242704, -0.424991963547792, -0.0705716060906837, -0.0492796092042717, -0.0722469351146286, 0.818994468586085, 0.159942793521877, 0.172395257095942, -1.04316900043789, -0.314457359864439, 1.0918990133138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0087927090708986, 0.0180839093892028, 0.406799414567345, -0.146929444559864, 0.526496842949825, -1.09347628844525, 1.46007409911639, -1.33646288912419, 0.987009090127867, -0.0694601616527221, 0.240602121904116, -0.478804608828337, 0.603450004922122, -0.505268286600483, 0.306977302704001, -0.00247527129268345, -0.00114824513847678, -0.000858764763552668, -0.000810572121069985, -0.000949939770109126, -0.00162847451175851, 0.0201631387202039, 0.00977992505666882, 0.00785137380335901, 0.008444067791183, 0.0137227000166995, -0.0730276591671861, -0.0380220295914477, -0.0347803568705718, -0.0518708710671329, 0.155997190117277, 0.0925450728990586, 0.117391186136654, -0.224020808014578, -0.184292786273571, 0.260107308500107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00940495437832305, 0.0380448638347133, 0.0129456047662751, 0.187763650165902, -0.419186504212878, 0.602030537374058, -0.544986219216521, 0.303426707344365, -0.0952613807854192, -0.0015457020946124, -0.000943963718433522, -0.000893895663951164, -0.00111710075866234, -0.00199665599129757, -0.0107809837635668, -0.0767083058178318, 0.276970850992037, -0.584055855246757, 0.806293017072708, -0.809348369920051, 1.05455597040804, 0.0133184391526004, -0.0522141369596153, 0.126365380883714, -0.231403133541958, 0.669340093966494, 0.00883132640500392, -0.0397356571322906, 0.127562497868832, -0.673130310092112, 0.00959792064238059, -0.0572841174236595, 0.529921876252884, 0.0159105531749605, -0.273638598761574, 0.0819466464178955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.011283240638805, -0.0188544332425243, 0.011547219698492, 0.295064434623245, -0.447189632841039, 0.591681610082053, -0.514654657963258, 0.279416818722859, -0.0861580586183823, -0.00943168755703904, -0.00234464757732831, -0.00158571154941749, -0.00159070456842585, -0.00237013457984159, -0.00975073658818302, -0.0843049468264094, 0.27387242501942, -0.505557199602691, 0.58305268817824, -0.443080792248772, 0.298484675140401, 0.0742787093747532, -0.261050064355969, 0.549325220444031, -0.826243677853533, 1.60331930673077, 0.0199763769301508, -0.0800313092003945, 0.219637637544496, -0.843571941003992, 0.0154009347841396, -0.0804695156812468, 0.563916732390121, 0.0201490014948128, -0.26882805258561, 0.0766608726472719, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0143003319812395, 0.00130297045014842, -0.00439389496144264, -0.0129165577253311, 0.326772886775826, -0.289387629599625, 0.223650044691118, -0.114073133196682, 0.0337705514004201, -0.0276003684898167, 0.00932563738090614, 0.00225784032626382, 0.00138738638481485, 0.00144425051069406, 0.00382190309790644, -0.0909002464561829, 0.241987282169665, -0.344686972704913, 0.274056461265552, -0.107354237558162, -0.00481435919399671, 0.184241600735625, -0.52751440682133, 0.847386108577654, -0.856012726582408, 0.730628667473463, -0.0669530688159953, 0.21618810860786, -0.44122744924838, 0.971177796005054, -0.0182809969576203, 0.0749971734901793, -0.333513146140757, -0.014272096860759, 0.127576341799983, -0.0323720518109698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0174686241890843, -0.000465403488336229, 0.00225295454211709, 0.00413646705711257, -0.0189421963079385, 0.377292945035929, -0.157543173780247, 0.067711250262128, -0.0183385134526664, -0.0573309210233554, 0.0605739575993445, -0.0171487256939082, -0.00266313074382239, -0.00143680724775221, -0.00207541832955855, -0.086969946537975, 0.169020266588184, -0.154565455553942, 0.0574846864797374, 0.00112155569091886, 0.000710152097409098, 0.298388602481126, -0.619259025371126, 0.630491448768186, -0.289105832222494, -0.0105601025116403, -0.336666416296302, 0.777898816054542, -0.976490201295285, 0.838278150962803, 0.106115518471697, -0.302301385849418, 0.710440190713521, 0.0203178363695023, -0.108363070170095, 0.0205223025125213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0190159034833559, 0.000973356784444456, -0.00150127135435963, -0.00828106404313106, 0.0326946825276981, -0.0868194179864455, 0.506286463248137, -0.0648833714027986, 0.0137636713744988, -0.0894934171512675, 0.161691687766998, -0.133141009501566, 0.0406093961418995, 0.0026700098053936, 0.0015576712870646, -0.0670681752507132, 0.0800295075559875, -0.0312027118994788, -0.00163202791073813, -0.000665915345546475, -0.000702349152075691, 0.328402463969079, -0.415383865609227, 0.177974133909416, 0.0111463864542099, 0.00751514487188397, -0.628944860598739, 0.874220240380372, -0.448507892101731, -0.0464150814640351, 0.569117305697112, -0.947222583895685, 0.802995470720638, -0.207854028192811, 0.571637244601805, -0.0225816977196436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0170766261155938, -0.0019902450565573, 0.00018322781144544, 0.016573992432237, -0.0621025149754154, 0.141010282512097, -0.234817846211764, 0.711969237222367, -0.00229550757315027, -0.102961606182755, 0.257124698527092, -0.337811943545342, 0.240710935494929, -0.0797960856157467, -0.000259788695809636, -0.0371991617696025, 0.0187004957407525, 0.00161221093137425, 0.000689862224281284, 0.000506219500461186, 0.000677682858969579, 0.232332914196243, -0.122971758611374, -0.0115148481653328, -0.00575309472717426, -0.00635064230911914, -0.610877183966389, 0.351182316028281, 0.0383962027987862, 0.0288583307705499, 0.871704322266548, -0.585127809893801, -0.096237869211644, -0.725258497988564, 0.732342077008645, 0.361674770058887, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0113163607576261, 0.00244459347801201, -0.00147043437734156, -0.0201273753315641, 0.073621636857118, -0.158307468628364, 0.226199833492627, -0.247218257617761, 0.884554817400702, -0.0804526857721977, 0.245900934926361, -0.419528198446364, 0.43287558164716, -0.272343914583296, 0.100107420717141, -0.0121942700766043, -0.000688567149334434, -0.000321609418311553, -0.000232241492134705, -0.000227106059889247, -0.000345258140950958, 0.089482870586966, 0.00529106321232261, 0.0026594224753119, 0.00219948159309904, 0.00303198268350923, -0.286399393165856, -0.0182237211382529, -0.0104906739243829, -0.0122307717259138, 0.525817451503858, 0.0383196828610049, 0.0310960845532622, -0.621382287353624, -0.0638356455838533, 0.551100661239914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00419482470538215, 0.0188020749954234, 0.406799414567345, -0.153895792551866, 0.556408957920232, -1.16876062678566, 1.58490607884513, -1.48646566070936, 1.1624309871152, -0.0329028675523176, 0.113000144935351, -0.222473029663854, 0.276387492673492, -0.226438945814256, 0.131555405716671, -0.00138091450265607, -0.000599807842467531, -0.000433133622419818, -0.000396812145152337, -0.00044990777262004, -0.000730972953038782, 0.0111527947944148, 0.00505420148370687, 0.00390347479753869, 0.00404479949375034, 0.00621498871030152, -0.0399624819397225, -0.019369141127516, -0.0169196646903393, -0.0237597669404017, 0.0841472432693772, 0.0461296716088445, 0.0546092934506974, -0.118239740897917, -0.0878433208703404, 0.131280739299055, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0137501289200363, 0.478646224257125, 0.0129456047662751, 0.564261658937412, -0.85225968886445, 0.972637415487376, -0.748017850187844, 0.367034077714178, -0.103936885792196, -0.00204303904989298, -0.00110338371652089, -0.000892734842534999, -0.000896493153717454, -0.00111867637279975, -0.0021054787567904, -0.110623167906397, 0.391613737263944, -0.800601644335545, 1.04539394481717, -0.921937268806356, 0.618915171491207, 0.016985464459362, -0.0630777716964558, 0.139190367774705, -0.209460871729458, 0.265768782876855, 0.00962308715226566, -0.0385733727930197, 0.0980958592801263, -0.21238511194028, 0.00840397231947226, -0.0388229051242303, 0.14204657334163, 0.00972611336402874, -0.0646431355842648, 0.0174612964295847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0130724452826477, 0.0573466318111091, 0.0115472196984921, 1.09459087571854, -0.959600350861308, 0.973965459019146, -0.710871974320419, 0.338517169380733, -0.094004519196165, -0.00995918232739884, -0.00221143145035133, -0.00129469931920176, -0.00106358842486632, -0.00114460957150823, -0.00190427601040044, -0.0971270424547437, 0.312948138520667, -0.57015181975731, 0.641722637530174, -0.459162023935283, 0.216246690059208, 0.0764386635634838, -0.258224052114152, 0.507328309984258, -0.656822467526059, 0.671910094107585, 0.0177956674838559, -0.0648294224029631, 0.146509779718407, -0.271187758635749, 0.0112352821598048, -0.0470808083831585, 0.152118816549061, 0.0106167288015664, -0.0636055796787639, 0.0163349969810645, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.011825738600673, -0.0126008532446808, -0.00439389496144264, 0.21715113166799, 0.834092126552661, -0.499665468155439, 0.313480194113943, -0.138672991396937, 0.0368460536169573, -0.0210809128006089, 0.0064675401884907, 0.00138477915020817, 0.000718468195384944, 0.000569935183155804, 0.00074640088136944, -0.075751706378628, 0.20401479695513, -0.296314755168379, 0.245047084198728, -0.108135959117464, 0.0158068841079712, 0.139412314688866, -0.393305599333347, 0.615081376497041, -0.583260456299225, 0.36421446274714, -0.0448033622091234, 0.136097590183693, -0.24405436417197, 0.32748438016152, -0.0103291081331109, 0.0359779445015892, -0.0912949062448065, -0.00614502353084458, 0.0302880372366744, -0.00689787828317701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0100093864027661, 0.00308900434567163, 0.00225295454211707, -0.0332951985492174, 0.231854390775544, 0.754300698505447, -0.228433582910895, 0.0828869306578098, -0.0200086117019645, -0.0308518253866046, 0.0302104346034999, -0.007766470454013, -0.00105716416961846, -0.000463103648667661, -0.000405320080260483, -0.0510638995341277, 0.10318938664371, -0.101499672367412, 0.0456213297222869, -0.00442471729325545, -0.0011163384545591, 0.162370108978458, -0.343312337352019, 0.36290212309877, -0.186295502757192, 0.0252432691456125, -0.166358296622195, 0.378005642252973, -0.456360391057468, 0.327300330764809, 0.0459601751690616, -0.119273799932297, 0.201177939389621, 0.007145127435636, -0.0259059186797845, 0.004372918517755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00771091076502105, -0.000843644498790287, -0.00150127135435965, 0.00782673830699745, -0.0351831931352398, 0.121095459563477, 0.82047170912204, -0.0807055787864037, 0.0150171363036925, -0.0346972847643066, 0.0593816512976127, -0.0456612976492789, 0.012691972753095, 0.000722256556864379, 0.000304206357870894, -0.0283709395014871, 0.0365582054300666, -0.0173418745476632, 0.000711444736713514, 0.000193845528593841, 0.000129640352780836, 0.131590279977387, -0.177196922901247, 0.0901419155215643, -0.00420555892961028, -0.00157938480981914, -0.235343281439288, 0.339854954079632, -0.196614716464869, 0.012643362172714, 0.194069469745413, -0.318713771258712, 0.254139904633156, -0.0613465170061721, 0.138861910930066, -0.00481173708750898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00515876269448837, -0.000310977142728363, 0.000183227811445471, 0.00269519667886886, -0.0106459557057944, 0.026126708927164, -0.050431907537694, 0.935581938134159, -0.00250456067819403, -0.030246961586705, 0.0730339285435653, -0.0919724716705892, 0.0618991977460588, -0.0188001399423867, -5.07355907658352e-05, -0.0119231889842782, 0.00697998655835437, 9.42711953774865e-05, 3.28689240714438e-05, 2.04453162194981e-05, 2.15219837679697e-05, 0.0720019792098488, -0.0439955591317464, -0.000635948152897841, -0.000251139452738719, -0.000212610931903657, -0.18146362833716, 0.118670408725522, 0.00194286250136669, 0.0010442334554043, 0.2445745296261, -0.181155212175454, -0.00403657257935894, -0.186434013292297, 0.187943391387176, 0.077066123473736, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00272807288411639, 0.000228964365082621, -0.00147043437734149, -0.00191627313076468, 0.00715384968413744, -0.0158054035861901, 0.0235129244708145, -0.0278023274775159, 0.965111698729285, -0.0191268510321443, 0.0574900271389939, -0.0960454483499865, 0.0963516729570902, -0.0580884185907886, 0.0195505393885584, -0.00316309012265784, -1.81041961444211e-05, -7.65347657943503e-06, -5.16107499928375e-06, -4.70689967818974e-06, -6.41958072689552e-06, 0.0228257506849957, 0.000136225745874373, 6.15315526933391e-05, 4.68377899896164e-05, 5.75378368032897e-05, -0.07153861905536, -0.000456177484499373, -0.000232589247686307, -0.000238479206512432, 0.127697970618754, 0.000919166943443336, 0.000631266217376622, -0.144605088345566, -0.00140202688002908, 0.117429235107162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.000872818017150092, 0.0189862680714028, 0.406799414567345, -0.15610107426015, 0.567455617206899, -1.20021306161591, 1.64300121306148, -1.5642073459374, 1.26829420015707, -0.00681691044346847, 0.0232918598407978, -0.0455631809825608, 0.0561217395764407, -0.0453899894472437, 0.0256921926747958, -0.000312157272883358, -0.000130099835558637, -9.19587200981834e-05, -8.27428489658861e-05, -9.19750938476e-05, -0.000144801454748253, 0.00250819736339598, 0.00108925273390829, 0.000821671967709662, 0.000832604457127101, 0.00123785735700572, -0.00892980444797642, -0.00413868660890726, -0.00351588824624197, -0.00476504958696788, 0.0186425561037014, 0.00973035668755928, 0.0110558816866098, -0.0258598055383046, -0.0180526373492461, 0.0279734681600754, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1[64][72] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.478646224257126, 0.013750128920036, 0.0129456047662751, -0.00204303904989246, -0.0011033837165209, -0.000892734842534802, -0.000896493153717245, -0.00111867637279987, -0.00210547875679016, 0.564261658937412, -0.85225968886445, 0.972637415487377, -0.748017850187844, 0.367034077714178, -0.103936885792195, 0.618915171491206, -0.921937268806352, 1.04539394481717, -0.800601644335545, 0.391613737263943, -0.110623167906396, 0.265768782876855, -0.209460871729459, 0.139190367774703, -0.0630777716964546, 0.016985464459361, -0.212385111940278, 0.098095859280127, -0.038573372793018, 0.0096230871522658, 0.142046573341628, -0.0388229051242315, 0.00840397231947131, -0.0646431355842638, 0.00972611336402975, 0.0174612964295839},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0573466318111094, 0.0130724452826474, 0.0115472196984921, -0.00995918232739881, -0.00221143145035102, -0.00129469931920238, -0.00106358842486595, -0.00114460957150839, -0.00190427601040025, 1.09459087571854, -0.95960035086131, 0.973965459019147, -0.710871974320419, 0.338517169380733, -0.0940045191961649, 0.216246690059207, -0.459162023935281, 0.641722637530172, -0.570151819757309, 0.312948138520666, -0.0971270424547429, 0.671910094107584, -0.656822467526056, 0.507328309984254, -0.258224052114148, 0.0764386635634815, -0.271187758635746, 0.146509779718407, -0.0648294224029616, 0.017795667483857, 0.15211881654906, -0.0470808083831602, 0.0112352821598034, -0.0636055796787632, 0.0106167288015675, 0.0163349969810636},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0126008532446806, 0.0118257386006729, -0.00439389496144264, -0.0210809128006084, 0.00646754018849043, 0.00138477915020759, 0.000718468195383806, 0.0005699351831557, 0.000746400881369378, 0.217151131667989, 0.83409212655266, -0.499665468155438, 0.313480194113941, -0.138672991396936, 0.0368460536169568, 0.0158068841079711, -0.108135959117463, 0.245047084198727, -0.296314755168379, 0.204014796955129, -0.0757517063786275, 0.36421446274714, -0.583260456299224, 0.61508137649704, -0.393305599333346, 0.139412314688866, 0.327484380161519, -0.244054364171968, 0.136097590183692, -0.0448033622091231, -0.0912949062448062, 0.0359779445015883, -0.0103291081331104, 0.0302880372366744, -0.0061450235308447, -0.00689787828317755},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00308900434567194, 0.0100093864027661, 0.00225295454211697, -0.0308518253866036, 0.0302104346035001, -0.00776647045401415, -0.00105716416961861, -0.000463103648668202, -0.000405320080260303, -0.0332951985492181, 0.231854390775544, 0.754300698505448, -0.228433582910895, 0.0828869306578106, -0.0200086117019644, -0.00111633845455917, -0.00442471729325538, 0.0456213297222869, -0.101499672367412, 0.103189386643709, -0.0510638995341272, 0.0252432691456129, -0.186295502757192, 0.362902123098769, -0.343312337352019, 0.162370108978457, 0.327300330764809, -0.456360391057467, 0.378005642252973, -0.166358296622195, 0.201177939389621, -0.119273799932296, 0.0459601751690627, -0.0259059186797849, 0.00714512743563529, 0.00437291851775512},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000843644498790086, 0.00771091076502107, -0.00150127135435969, -0.0346972847643059, 0.059381651297613, -0.04566129764928, 0.0126919727530948, 0.000722256556864073, 0.000304206357871151, 0.0078267383069966, -0.0351831931352399, 0.121095459563477, 0.820471709122038, -0.0807055787864028, 0.0150171363036922, 0.000129640352780832, 0.000193845528593811, 0.000711444736713764, -0.0173418745476637, 0.0365582054300664, -0.0283709395014871, -0.00157938480981872, -0.00420555892961092, 0.0901419155215644, -0.177196922901248, 0.131590279977387, 0.012643362172714, -0.19661471646487, 0.339854954079633, -0.235343281439289, 0.254139904633157, -0.318713771258713, 0.194069469745415, 0.138861910930067, -0.0613465170061729, -0.00481173708750914},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000310977142728246, 0.00515876269448829, 0.000183227811445349, -0.0302469615867046, 0.0730339285435655, -0.0919724716705903, 0.0618991977460593, -0.0188001399423872, -5.07355907654813e-05, 0.00269519667886807, -0.0106459557057951, 0.0261267089271655, -0.0504319075376956, 0.935581938134158, -0.00250456067819432, 2.1521983767961e-05, 2.04453162195365e-05, 3.28689240717218e-05, 9.4271195377107e-05, 0.00697998655835399, -0.0119231889842781, -0.000212610931902828, -0.000251139452739009, -0.000635948152897865, -0.043995559131746, 0.0720019792098495, 0.00104423345540385, 0.00194286250136703, 0.118670408725521, -0.181463628337161, -0.0040365725793592, -0.181155212175454, 0.244574529626103, 0.187943391387177, -0.186434013292299, 0.0770661234737368},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000228964365082614, 0.00272807288411623, -0.00147043437734157, -0.0191268510321429, 0.0574900271389923, -0.0960454483499846, 0.0963516729570883, -0.0580884185907878, 0.0195505393885585, -0.00191627313076539, 0.00715384968413652, -0.015805403586188, 0.0235129244708125, -0.0278023274775148, 0.965111698729285, -6.41958072710586e-06, -4.70689967805487e-06, -5.16107499904956e-06, -7.65347657979542e-06, -1.81041961448726e-05, -0.0031630901226576, 5.75378368038622e-05, 4.68377899894915e-05, 6.1531552693346e-05, 0.000136225745874699, 0.0228257506849951, -0.000238479206512571, -0.000232589247686189, -0.000456177484500803, -0.071538619055358, 0.000631266217376303, 0.000919166943444724, 0.127697970618753, -0.00140202688003008, -0.144605088345564, 0.117429235107159},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0189862680714027, 0.000872818017149936, 0.406799414567345, -0.00681691044346666, 0.0232918598407952, -0.0455631809825572, 0.0561217395764355, -0.0453899894472405, 0.0256921926747942, -0.156101074260151, 0.567455617206899, -1.20021306161591, 1.64300121306148, -1.5642073459374, 1.26829420015707, -0.000144801454748648, -9.19750938469218e-05, -8.27428489661242e-05, -9.19587200980368e-05, -0.000130099835559296, -0.000312157272883205, 0.00123785735700528, 0.000832604457127063, 0.000821671967709922, 0.00108925273390784, 0.00250819736339561, -0.00476504958696736, -0.00351588824624165, -0.00413868660890791, -0.00892980444797548, 0.0110558816866091, 0.00973035668755956, 0.0186425561037011, -0.0180526373492451, -0.025859805538303, 0.0279734681600737},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0380448638347132, 0.00940495437832264, 0.0129456047662751, -0.00154570209461198, -0.000943963718433364, -0.000893895663951091, -0.00111710075866193, -0.00199665599129788, -0.0107809837635666, 0.187763650165902, -0.419186504212878, 0.602030537374058, -0.544986219216521, 0.303426707344365, -0.095261380785419, 1.05455597040804, -0.809348369920049, 0.806293017072705, -0.584055855246756, 0.276970850992035, -0.0767083058178312, 0.669340093966495, -0.231403133541958, 0.126365380883712, -0.0522141369596136, 0.0133184391525998, -0.673130310092111, 0.127562497868834, -0.0397356571322894, 0.00883132640500379, 0.529921876252883, -0.0572841174236609, 0.00959792064238015, -0.273638598761574, 0.0159105531749617, 0.0819466464178949},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0188544332425243, 0.0112832406388045, 0.0115472196984921, -0.00943168755703891, -0.00234464757732768, -0.00158571154941841, -0.00159070456842513, -0.00237013457984219, -0.0097507365881827, 0.295064434623244, -0.44718963284104, 0.591681610082054, -0.514654657963259, 0.279416818722859, -0.0861580586183822, 0.298484675140401, -0.443080792248771, 0.583052688178238, -0.50555719960269, 0.273872425019418, -0.0843049468264087, 1.60331930673077, -0.826243677853532, 0.549325220444028, -0.261050064355966, 0.0742787093747517, -0.843571941003992, 0.219637637544498, -0.0800313092003948, 0.0199763769301516, 0.563916732390121, -0.0804695156812487, 0.0154009347841394, -0.26882805258561, 0.0201490014948138, 0.0766608726472714},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00130297045014866, 0.0143003319812393, -0.00439389496144261, -0.0276003684898161, 0.00932563738090631, 0.00225784032626304, 0.0013873863848142, 0.0014442505106935, 0.00382190309790661, -0.0129165577253314, 0.326772886775825, -0.289387629599624, 0.223650044691117, -0.114073133196681, 0.0337705514004198, -0.00481435919399677, -0.107354237558162, 0.274056461265551, -0.344686972704913, 0.241987282169664, -0.0909002464561825, 0.730628667473462, -0.856012726582406, 0.847386108577653, -0.527514406821329, 0.184241600735625, 0.971177796005054, -0.441227449248379, 0.216188108607859, -0.0669530688159948, -0.333513146140757, 0.0749971734901782, -0.0182809969576195, 0.127576341799983, -0.0142720968607594, -0.0323720518109703},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000465403488335705, 0.0174686241890843, 0.00225295454211695, -0.0573309210233544, 0.0605739575993446, -0.017148725693909, -0.00266313074382256, -0.00143680724775275, -0.00207541832955841, 0.00413646705711202, -0.018942196307939, 0.37729294503593, -0.157543173780247, 0.0677112502621288, -0.0183385134526664, 0.000710152097409061, 0.00112155569091887, 0.0574846864797376, -0.154565455553942, 0.169020266588183, -0.0869699465379746, -0.0105601025116399, -0.289105832222494, 0.630491448768184, -0.619259025371126, 0.298388602481125, 0.838278150962802, -0.976490201295283, 0.77789881605454, -0.336666416296301, 0.71044019071352, -0.302301385849418, 0.106115518471697, -0.108363070170095, 0.0203178363695022, 0.0205223025125213},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000973356784444778, 0.0190159034833559, -0.00150127135435973, -0.0894934171512663, 0.161691687766998, -0.133141009501566, 0.0406093961418993, 0.00267000980539325, 0.00155767128706485, -0.00828106404313184, 0.0326946825276979, -0.0868194179864449, 0.506286463248135, -0.0648833714027978, 0.0137636713744985, -0.000702349152075833, -0.000665915345546298, -0.00163202791073834, -0.0312027118994789, 0.0800295075559868, -0.0670681752507128, 0.00751514487188463, 0.0111463864542091, 0.177974133909415, -0.415383865609225, 0.328402463969078, -0.0464150814640352, -0.44850789210173, 0.874220240380368, -0.628944860598737, 0.802995470720637, -0.947222583895683, 0.569117305697112, 0.571637244601804, -0.207854028192811, -0.022581697719644},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0019902450565571, 0.0170766261155937, 0.000183227811445315, -0.102961606182754, 0.257124698527092, -0.337811943545342, 0.240710935494929, -0.0797960856157471, -0.00025978869580915, 0.0165739924322361, -0.0621025149754161, 0.141010282512099, -0.234817846211765, 0.711969237222367, -0.00229550757315047, 0.000677682858969407, 0.000506219500461435, 0.00068986222428114, 0.00161221093137413, 0.0187004957407519, -0.0371991617696023, -0.00635064230911863, -0.00575309472717408, -0.0115148481653329, -0.122971758611372, 0.232332914196243, 0.0288583307705498, 0.0383962027987863, 0.351182316028277, -0.610877183966388, -0.0962378692116444, -0.585127809893798, 0.871704322266549, 0.732342077008643, -0.725258497988565, 0.361674770058887},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0024445934780121, 0.011316360757626, -0.00147043437734161, -0.0804526857721969, 0.245900934926361, -0.419528198446365, 0.432875581647161, -0.272343914583297, 0.100107420717142, -0.0201273753315651, 0.0736216368571181, -0.158307468628364, 0.226199833492627, -0.247218257617762, 0.884554817400702, -0.000345258140951302, -0.000227106059888905, -0.000232241492134741, -0.000321609418311682, -0.000688567149335053, -0.012194270076604, 0.00303198268350945, 0.00219948159309915, 0.00265942247531202, 0.00529106321232335, 0.0894828705869661, -0.0122307717259141, -0.0104906739243829, -0.0182237211382553, -0.286399393165856, 0.031096084553263, 0.0383196828610069, 0.525817451503859, -0.0638356455838559, -0.621382287353626, 0.551100661239915},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0188020749954233, 0.00419482470538202, 0.406799414567345, -0.0329028675523159, 0.113000144935348, -0.222473029663851, 0.276387492673488, -0.226438945814253, 0.131555405716669, -0.153895792551867, 0.556408957920233, -1.16876062678566, 1.58490607884513, -1.48646566070936, 1.1624309871152, -0.00073097295303919, -0.000449907772619317, -0.000396812145152653, -0.000433133622419615, -0.000599807842468213, -0.00138091450265584, 0.00621498871030111, 0.0040447994937503, 0.00390347479753897, 0.00505420148370643, 0.0111527947944146, -0.0237597669404013, -0.0169196646903388, -0.0193691411275168, -0.0399624819397217, 0.0546092934506973, 0.0461296716088448, 0.0841472432693764, -0.0878433208703404, -0.118239740897916, 0.131280739299054},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00739147825747418, -0.00359604803774387, 0.0129456047662751, 0.000717100783397017, 0.000559101919707802, 0.000737770718842175, 0.0015497889256685, 0.00976922031257087, -0.0251568325771658, 0.00852280133621238, -0.0915852190502786, 0.230054181864113, -0.294743047020546, 0.211246100197909, -0.0808855319718201, 0.111696109942884, 0.865187529320796, -0.427449404394959, 0.260703591679881, -0.114210134327397, 0.0302169597751986, 0.341242020148123, 0.432650793917239, -0.0948126675187082, 0.0300025096350908, -0.00669796672882824, -0.600217046341821, -0.33754969599581, 0.0383791632509461, -0.00618891466462056, 0.668755650000597, 0.195130779881564, -0.0113060612834047, -0.444538951879176, -0.0660991555877431, 0.162361377260483},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00283893426243661, -0.004357228357771, 0.011547219698492, 0.00434154786331089, 0.00134586543554707, 0.00122531250484267, 0.00194004118943231, 0.00796706488508583, -0.0227528074647437, -0.0110636734133892, -0.0807651740252507, 0.215046525011704, -0.27415517388502, 0.193851849610704, -0.0731559877418216, -0.0261157250737919, 0.268992813570382, -0.258448241827091, 0.208100687233416, -0.109066098793025, 0.032950516041913, 0.675693896752866, 1.00943382824112, -0.356887633517212, 0.1399470945093, -0.0362028190297408, -0.715424899281766, -0.393289769872555, 0.0677171620594397, -0.0131067004635195, 0.700959759958008, 0.187661049327416, -0.0159485967763227, -0.435200673594057, -0.0575086073328367, 0.151888642294499},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00197738145155587, -0.00434826354308827, -0.00439389496144262, 0.00972506232070785, -0.00394891687618873, -0.00122055946612845, -0.00107986586631297, -0.00232965271374459, 0.00891820064557561, -0.0115045850640763, 0.0214464136483399, -0.0915786531546617, 0.114931168425819, -0.07853234326005, 0.0286742538527507, -0.0100059937496387, 0.0113651850183469, -0.0675035667575721, 0.0957545501018973, -0.0705435312272386, 0.0271954686590868, 0.111893005514226, 0.436961492292215, -0.338939791766795, 0.196320308890674, -0.0662431750190943, 0.717150989022612, 0.36574635782409, -0.115842887272116, 0.0307319543585345, -0.39992574024808, -0.0832834556102042, 0.0120816495975147, 0.204942909846688, 0.0195474636089611, -0.0641389385231633},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00211066058572794, -0.000966471894999994, 0.00225295454211697, 0.00355328026085932, -0.00431975992871985, 0.00146943810097255, 0.000297696979547082, 0.000260641409665703, -0.00484287450842215, 0.014534611810255, -0.0424652905770616, 0.0660690246195588, -0.0741046906405278, 0.0458751442593115, -0.0155710572738028, 0.00582267846789949, -0.000456109918238861, -0.00112526113200091, 0.00622985572984251, -0.00816637003199272, 0.00457681883029905, -0.0552420095552869, 0.00918376938559293, -0.0331518103333866, 0.0359507866547565, -0.0180679910449843, 0.342534977240919, 0.0833218499427753, -0.0589144273331844, 0.0244947613724358, 0.779778394621047, 0.0371536643996277, -0.0100719790633857, -0.171315034703523, -0.00312950996015848, 0.0406609598579203},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00243271802271119, 0.00740167678812127, -0.00150127135435972, -0.0377006726019649, 0.075041452138999, -0.0700102954072211, 0.0254596876806581, 0.00225437218408513, 0.00363474026473941, -0.0181958325136244, 0.0597822181908072, -0.115152061197742, 0.16445354079855, -0.0423081796878003, 0.0116866023968238, -0.00360111024577526, -0.00102807946503183, -0.00135709099241917, -0.00532953500101828, 0.0242189110331137, -0.0239899018744664, 0.0320648952277751, 0.012482503694319, 0.0362435175925443, -0.14242644038768, 0.129411811389595, -0.143651951607918, -0.123006982040073, 0.357386653157187, -0.280812613328441, 0.608635915000899, -0.521501710217866, 0.302957916855986, 0.869779198030629, -0.149013350710809, -0.0447412518133334},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00425137917898673, 0.0167565561316648, 0.000183227811445297, -0.106010269673274, 0.280667233736476, -0.397225820514663, 0.313574334492999, -0.122519870870591, -0.000606202631341049, 0.0332473233807808, -0.114801254228948, 0.231926296240728, -0.314632403374344, 0.399779422492618, -0.00194909363761857, 0.00317214930161709, 0.0014368163401032, 0.00147810832393905, 0.00254013430324977, 0.0114619958164061, -0.0325206904927211, -0.0273938242113581, -0.0145286639160788, -0.0200990370917976, -0.0811945841203714, 0.215334012264826, 0.110756184042016, 0.0789924469244453, 0.256883692009512, -0.609916453300601, -0.300895653072878, -0.504469471678579, 0.964201631153255, 0.959556965042441, -0.945522227857854, 0.716588370043479},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00685856376597518, 0.0181171337236427, -0.00147043437734164, -0.131865558309645, 0.414642125258716, -0.733188775226241, 0.794063231537647, -0.538467511212326, 0.233595159583084, -0.0549900225212121, 0.194626000527733, -0.400746192134264, 0.537420610966995, -0.521893013062616, 0.75106707853476, -0.00220109226423602, -0.00118704160578887, -0.00107844949589943, -0.00133538177988041, -0.00245109691066463, -0.0169707335347361, 0.0187033617242704, 0.0110085510610679, 0.011590478638455, 0.0195208418036531, 0.128117107050858, -0.0722469351146293, -0.049279609204271, -0.0705716060906866, -0.424991963547791, 0.172395257095943, 0.159942793521878, 0.818994468586084, -0.314457359864442, -1.04316900043789, 1.0918990133138},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0180839093892028, 0.0087927090708985, 0.406799414567345, -0.0694601616527206, 0.240602121904114, -0.478804608828334, 0.603450004922119, -0.505268286600481, 0.306977302704, -0.146929444559865, 0.526496842949826, -1.09347628844525, 1.46007409911639, -1.33646288912419, 0.987009090127867, -0.00162847451175895, -0.000949939770108365, -0.000810572121070368, -0.000858764763552382, -0.00114824513847753, -0.00247527129268314, 0.0137227000166991, 0.00844406779118306, 0.00785137380335922, 0.00977992505666846, 0.0201631387202039, -0.0518708710671327, -0.0347803568705712, -0.0380220295914485, -0.0730276591671854, 0.117391186136655, 0.0925450728990588, 0.155997190117276, -0.184292786273571, -0.224020808014577, 0.260107308500106},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000673476904029849, 0.00130842233900841, 0.0129456047662751, -0.000357023761018412, -0.000427650058470702, -0.00112068372230397, -0.0167114736630792, 0.0481433641804237, -0.0432952606592747, -0.00030375678114219, -0.00085641264474454, 0.0391517934723864, -0.105377248020119, 0.118467931677203, -0.0627471038897112, -0.00685119082543919, 0.039869837392001, 0.784419607467857, -0.141583272882053, 0.0489907739717661, -0.0116705286659852, 0.00549167194466061, 0.362857049536412, 0.365520588898824, -0.0255582632571284, 0.00397432499191755, -0.175798130964403, -0.594726836203326, -0.232086459595813, 0.0072928785848826, 0.411486078891195, 0.539280128111155, 0.0945750044292787, -0.429048439156668, -0.252694204721931, 0.216765401913336},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00181579466682024, 0.00227148999153141, 0.011547219698492, -0.0029869309892662, -0.00134516834301434, -0.00217437439505593, -0.0127365724325051, 0.0430209364968404, -0.0391578998228303, 0.00363351425302825, 0.00318076969376636, 0.0305348197291152, -0.0943816122171715, 0.107903155724677, -0.0567508953837351, 0.0147609397617144, -0.0572045106770045, 0.240922927935829, -0.127131133536057, 0.0606776810152985, -0.0175859427680214, -0.0457975754641772, 0.773966729272973, 0.806610858159013, -0.138234212577426, 0.0280698587521084, -0.174828157865077, -0.731114001346955, -0.247459747413697, 0.0180427891268706, 0.415306216222047, 0.564052909027592, 0.081224479441951, -0.416906009332956, -0.240900219639851, 0.202783464568771},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00165975606835027, 0.00186497367868487, -0.00439389496144259, -0.00521620724673398, 0.00284145043337728, 0.00134916315551719, 0.00268191124547691, -0.0163860680005424, 0.015348348023446, 0.00634796727115723, -0.00545641507350229, -0.00609611655494563, 0.0359471924273124, -0.0429842625815265, 0.0222441064748803, 0.00950185384239925, -0.0203382134112979, 0.0111599003886893, -0.03310488654923, 0.0277830686768159, -0.0113157106043615, -0.0489936799004549, 0.204590632025498, 0.263283898791194, -0.118776816861938, 0.036976523089134, 0.0821587854946919, 0.804619832077767, 0.157472559125198, -0.0263523013522615, -0.215273668186551, -0.320629316506442, -0.0232768207891381, 0.193053740970258, 0.106658831372108, -0.085630603914889},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00225886333874666, -0.00207842784617615, 0.00225295454211699, 0.00900801783786845, -0.0135206897789807, 0.00616787083288028, 0.00202938990826883, 0.00829479383766051, -0.0083346547519109, -0.012113194969103, 0.0242946497179606, -0.0174736276902309, -0.0173835330910673, 0.0242163238231735, -0.0120792770303141, -0.00835146140238997, 0.00830439958943138, 0.00202875483922224, 0.00613414889140211, -0.0134927062052443, 0.00900090826008865, 0.0543914215410206, -0.07729801345063, -0.0530140114088143, 0.079656852861345, -0.04387043523388, -0.155910192222399, 0.622033012730097, -0.212003729581142, 0.0797590598516272, 0.31480958526962, 0.624158094191803, -0.0532633799262504, -0.155636211344298, -0.0772611837975663, 0.0542856278660637},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00116253475539868, -0.00432277177226667, -0.00150127135435971, 0.0245692337735207, -0.0561013256006577, 0.0628959488088609, -0.0301986844602982, -0.00475378226013955, 0.00625543882394321, 0.00754493834069023, -0.0204568169044419, 0.029263672696878, -0.0214021933593832, -0.0203081336513588, 0.00906590383761996, 0.00256983110057908, -0.000741833404986641, -0.000409073206523876, -0.000623110595850736, -0.0086910485943459, 0.0121281294940286, -0.0188834028024413, 0.00668917389612507, 0.00559474566647395, 0.0614181959733819, -0.0750531024467853, 0.0628279724060607, -0.0337565835979057, -0.203478700176064, 0.195704230383569, -0.136319200417332, 0.527855532958427, -0.278766189012778, 0.718520376204176, 0.243759577414532, -0.0597331434055493},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00336360204889351, 0.00519578311063039, 0.000183227811445308, -0.0350502981129147, 0.100421053627562, -0.157472695738426, 0.143891633975703, -0.0725804522282778, -0.00104328320569606, 0.0244272410753743, -0.07674708284605, 0.136111585237663, -0.149652460376538, 0.109725685977479, -0.00151201306326373, 0.004011028519245, 0.000569022765284002, 0.000398058037296896, 0.000478966219249063, 0.00112559245531761, -0.00834115851285726, -0.0315175396459822, -0.00505107615622615, -0.00438682894443643, -0.00883451518126387, 0.0597679735981764, 0.111865838683756, 0.0222576403217614, 0.0323533635459341, -0.187568964150062, -0.246309252625379, -0.08202304681843, 0.343230392072434, 0.453255444646885, -0.434517949942807, 0.956702687916306},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0129955111573352, 0.0181610340178306, -0.00147043437734167, -0.136274456001437, 0.444651915638481, -0.824138336132289, 0.952193274041696, -0.716009562344314, 0.402020536244866, -0.100860288373606, 0.342957061155888, -0.670288304654795, 0.834203794881043, -0.710224310882619, 0.582641701872978, -0.00694798631917105, -0.00278140447737607, -0.00216302765356282, -0.00232995534844937, -0.00357701927019317, -0.0136052502080008, 0.0567208804039802, 0.0244839630788086, 0.0215739285633946, 0.0298604880941461, 0.106580243682161, -0.207967784178178, -0.101714862270763, -0.11516329317475, -0.370585025341606, 0.460540210841393, 0.289426335398095, 0.761857646390994, -0.73647873972847, -1.07606084699196, 1.45777236226579},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0163211681547544, 0.0131593584144996, 0.406799414567345, -0.104901626844077, 0.367352842108803, -0.741130753880073, 0.951444970892057, -0.819381641467322, 0.528312230734258, -0.131388710639438, 0.465583830065908, -0.953421402057858, 1.24889678784095, -1.10950625011425, 0.765674162097609, -0.00250619338119211, -0.00136226743931284, -0.00111431908505601, -0.00113700501698894, -0.00145543031218936, -0.00289996047206401, 0.0208845963646415, 0.0119396453442561, 0.0105886278800223, 0.0125673841085788, 0.0238816829615448, -0.077836530064568, -0.0482447293488609, -0.0497680385232163, -0.0876893260804621, 0.172811063022882, 0.124592052384052, 0.190801592410399, -0.26330892774801, -0.281822321234635, 0.347264024357007},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00130842233900868, 0.000673476904029651, 0.0129456047662751, -0.000303756781141447, -0.000856412644744328, 0.0391517934723869, -0.105377248020119, 0.118467931677203, -0.0627471038897113, -0.000357023761019211, -0.000427650058470458, -0.00112068372230467, -0.0167114736630791, 0.0481433641804239, -0.0432952606592746, -0.0116705286659855, 0.0489907739717665, -0.141583272882052, 0.784419607467856, 0.0398698373920007, -0.00685119082543896, 0.00397432499191803, -0.0255582632571289, 0.365520588898825, 0.362857049536413, 0.00549167194466017, 0.00729287858488225, -0.232086459595813, -0.594726836203328, -0.175798130964403, 0.0945750044292789, 0.539280128111155, 0.411486078891196, -0.252694204721932, -0.429048439156668, 0.216765401913336},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00227148999153172, -0.00181579466682049, 0.011547219698492, 0.00363351425302901, 0.00318076969376644, 0.0305348197291153, -0.0943816122171714, 0.107903155724677, -0.0567508953837352, -0.00298693098926705, -0.0013451683430142, -0.00217437439505624, -0.012736572432505, 0.0430209364968406, -0.0391578998228302, -0.0175859427680218, 0.0606776810152989, -0.127131133536057, 0.240922927935828, -0.0572045106770045, 0.0147609397617146, 0.0280698587521085, -0.138234212577427, 0.806610858159013, 0.773966729272975, -0.0457975754641776, 0.0180427891268704, -0.247459747413696, -0.731114001346956, -0.174828157865077, 0.0812244794419504, 0.564052909027592, 0.415306216222048, -0.240900219639851, -0.416906009332955, 0.202783464568771},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0018649736786849, -0.00165975606835028, -0.00439389496144263, 0.00634796727115825, -0.00545641507350238, -0.00609611655494629, 0.0359471924273132, -0.0429842625815271, 0.0222441064748804, -0.00521620724673487, 0.00284145043337713, 0.00134916315551778, 0.00268191124547681, -0.016386068000542, 0.015348348023446, -0.0113157106043615, 0.0277830686768162, -0.0331048865492298, 0.0111599003886892, -0.020338213411298, 0.00950185384239941, 0.0369765230891343, -0.118776816861937, 0.263283898791193, 0.204590632025499, -0.0489936799004554, -0.0263523013522615, 0.157472559125198, 0.804619832077768, 0.0821587854946919, -0.0232768207891385, -0.320629316506443, -0.21527366818655, 0.106658831372108, 0.193053740970258, -0.0856306039148889},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00207842784617601, 0.0022588633387466, 0.00225295454211696, -0.0121131949691019, 0.0242946497179603, -0.0174736276902311, -0.017383533091067, 0.024216323823173, -0.012079277030314, 0.00900801783786762, -0.0135206897789811, 0.00616787083288115, 0.00202938990826851, 0.00829479383766112, -0.00833465475191098, 0.00900090826008857, -0.0134927062052439, 0.00613414889140239, 0.00202875483922204, 0.00830439958943116, -0.00835146140238978, -0.0438704352338796, 0.079656852861345, -0.0530140114088145, -0.0772980134506292, 0.0543914215410202, 0.0797590598516273, -0.212003729581142, 0.622033012730096, -0.155910192222399, -0.0532633799262503, 0.624158094191803, 0.314809585269621, -0.0772611837975666, -0.155636211344298, 0.0542856278660638},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00432277177226659, -0.00116253475539875, -0.00150127135435971, 0.00754493834069116, -0.0204568169044417, 0.029263672696877, -0.0214021933593825, -0.0203081336513595, 0.0090659038376202, 0.0245692337735197, -0.0561013256006578, 0.0628959488088619, -0.0301986844602986, -0.00475378226013874, 0.00625543882394297, 0.0121281294940287, -0.00869104859434549, -0.000623110595850272, -0.000409073206524177, -0.000741833404986923, 0.00256983110057903, -0.0750531024467848, 0.0614181959733819, 0.00559474566647404, 0.00668917389612484, -0.0188834028024416, 0.195704230383569, -0.203478700176063, -0.0337565835979056, 0.06282797240606, -0.278766189012778, 0.527855532958426, -0.13631920041733, 0.243759577414532, 0.718520376204175, -0.0597331434055491},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00519578311063046, -0.00336360204889366, 0.000183227811445343, 0.0244272410753755, -0.0767470828460501, 0.136111585237663, -0.149652460376539, 0.109725685977479, -0.0015120130632635, -0.035050298112916, 0.100421053627563, -0.157472695738426, 0.143891633975704, -0.0725804522282778, -0.00104328320569642, -0.00834115851285734, 0.00112559245531811, 0.000478966219249351, 0.000398058037296737, 0.000569022765283625, 0.00401102851924511, 0.0597679735981771, -0.00883451518126454, -0.00438682894443644, -0.00505107615622659, -0.0315175396459825, -0.187568964150063, 0.0323533635459365, 0.0222576403217612, 0.111865838683756, 0.343230392072436, -0.0820230468184318, -0.24630925262538, -0.434517949942809, 0.453255444646888, 0.956702687916306},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0181610340178307, 0.0129955111573351, -0.00147043437734165, -0.100860288373605, 0.342957061155887, -0.670288304654794, 0.834203794881042, -0.710224310882618, 0.582641701872978, -0.136274456001438, 0.444651915638483, -0.82413833613229, 0.952193274041697, -0.716009562344314, 0.402020536244865, -0.0136052502080012, -0.00357701927019239, -0.00232995534844964, -0.00216302765356249, -0.00278140447737679, -0.0069479863191705, 0.106580243682161, 0.0298604880941455, 0.0215739285633945, 0.0244839630788087, 0.0567208804039803, -0.370585025341608, -0.115163293174747, -0.101714862270764, -0.207967784178177, 0.761857646390995, 0.289426335398094, 0.460540210841392, -1.07606084699196, -0.736478739728466, 1.45777236226579},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0131593584144997, 0.0163211681547543, 0.406799414567345, -0.131388710639437, 0.465583830065906, -0.953421402057856, 1.24889678784095, -1.10950625011425, 0.765674162097607, -0.104901626844079, 0.367352842108805, -0.741130753880077, 0.951444970892062, -0.819381641467326, 0.528312230734261, -0.00289996047206437, -0.00145543031218857, -0.0011370050169893, -0.00111431908505563, -0.00136226743931364, -0.00250619338119171, 0.0238816829615447, 0.012567384108579, 0.0105886278800223, 0.0119396453442559, 0.0208845963646419, -0.0876893260804627, -0.0497680385232156, -0.0482447293488618, -0.077836530064568, 0.1908015924104, 0.124592052384052, 0.172811063022882, -0.281822321234636, -0.26330892774801, 0.347264024357008},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00359604803774349, -0.00739147825747415, 0.0129456047662751, 0.00852280133621312, -0.0915852190502784, 0.230054181864114, -0.294743047020546, 0.21124610019791, -0.0808855319718202, 0.000717100783396282, 0.000559101919707974, 0.000737770718841728, 0.0015497889256685, 0.0097692203125709, -0.0251568325771656, 0.0302169597751982, -0.114210134327396, 0.260703591679881, -0.42744940439496, 0.865187529320797, 0.111696109942884, -0.00669796672882832, 0.0300025096350895, -0.0948126675187071, 0.432650793917239, 0.341242020148122, -0.00618891466462041, 0.0383791632509465, -0.337549695995811, -0.600217046341821, -0.0113060612834054, 0.195130779881564, 0.668755650000596, -0.0660991555877429, -0.444538951879176, 0.162361377260482},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0043572283577707, 0.00283893426243661, 0.011547219698492, -0.0110636734133885, -0.0807651740252508, 0.215046525011705, -0.274155173885019, 0.193851849610704, -0.0731559877418217, 0.00434154786331038, 0.00134586543554685, 0.00122531250484301, 0.00194004118943181, 0.00796706488508617, -0.0227528074647436, 0.0329505160419122, -0.109066098793024, 0.208100687233417, -0.258448241827091, 0.268992813570382, -0.0261157250737915, -0.0362028190297405, 0.139947094509298, -0.356887633517211, 1.00943382824112, 0.675693896752865, -0.0131067004635198, 0.0677171620594402, -0.393289769872556, -0.715424899281766, -0.0159485967763235, 0.187661049327416, 0.700959759958007, -0.0575086073328366, -0.435200673594057, 0.151888642294499},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00434826354308822, 0.0019773814515558, -0.00439389496144269, -0.0115045850640756, 0.0214464136483401, -0.0915786531546625, 0.114931168425821, -0.0785323432600507, 0.0286742538527508, 0.00972506232070719, -0.00394891687618906, -0.00122055946612775, -0.00107986586631287, -0.00232965271374399, 0.00891820064557557, 0.0271954686590867, -0.0705435312272379, 0.0957545501018977, -0.0675035667575722, 0.0113651850183469, -0.0100059937496384, -0.066243175019094, 0.196320308890674, -0.338939791766795, 0.436961492292214, 0.111893005514226, 0.0307319543585346, -0.115842887272117, 0.365746357824091, 0.717150989022611, 0.012081649597514, -0.0832834556102043, -0.39992574024808, 0.0195474636089619, 0.204942909846687, -0.0641389385231631},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.000966471894999883, -0.00211066058572821, 0.00225295454211699, 0.0145346118102559, -0.0424652905770618, 0.0660690246195586, -0.0741046906405276, 0.0458751442593109, -0.0155710572738028, 0.00355328026085849, -0.00431975992872028, 0.0014694381009735, 0.000297696979546944, 0.000260641409666328, -0.00484287450842219, 0.0045768188302989, -0.00816637003199249, 0.00622985572984318, -0.00112526113200131, -0.000456109918238791, 0.00582267846789969, -0.0180679910449838, 0.0359507866547567, -0.0331518103333863, 0.00918376938559431, -0.0552420095552874, 0.0244947613724359, -0.058914427333184, 0.0833218499427749, 0.342534977240918, -0.0100719790633856, 0.0371536643996277, 0.779778394621048, -0.00312950996015859, -0.171315034703523, 0.0406609598579204},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00740167678812134, 0.00243271802271098, -0.00150127135435968, -0.0181958325136236, 0.0597822181908074, -0.115152061197743, 0.164453540798551, -0.0423081796878009, 0.0116866023968241, -0.0377006726019661, 0.0750414521389992, -0.0700102954072207, 0.0254596876806582, 0.0022543721840857, 0.00363474026473923, -0.0239899018744666, 0.0242189110331143, -0.00532953500101802, -0.00135709099241908, -0.0010280794650321, -0.0036011102457751, 0.129411811389596, -0.142426440387681, 0.0362435175925449, 0.0124825036943193, 0.0320648952277746, -0.280812613328442, 0.35738665315719, -0.123006982040074, -0.143651951607918, 0.302957916855986, -0.521501710217868, 0.6086359150009, -0.149013350710809, 0.869779198030629, -0.044741251813333},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0167565561316649, -0.00425137917898694, 0.000183227811445395, 0.0332473233807817, -0.114801254228947, 0.231926296240727, -0.314632403374344, 0.399779422492619, -0.00194909363761843, -0.106010269673275, 0.280667233736478, -0.397225820514664, 0.313574334493, -0.12251987087059, -0.000606202631341535, -0.0325206904927212, 0.0114619958164067, 0.00254013430324995, 0.00147810832393918, 0.00143681634010283, 0.00317214930161733, 0.215334012264827, -0.081194584120373, -0.0200990370917976, -0.0145286639160794, -0.0273938242113585, -0.609916453300603, 0.256883692009517, 0.0789924469244457, 0.110756184042015, 0.964201631153257, -0.504469471678583, -0.300895653072878, -0.945522227857855, 0.959556965042444, 0.716588370043479},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0181171337236428, 0.00685856376597504, -0.00147043437734161, -0.0549900225212111, 0.194626000527732, -0.400746192134264, 0.537420610966995, -0.521893013062616, 0.75106707853476, -0.131865558309646, 0.414642125258718, -0.733188775226243, 0.794063231537649, -0.538467511212326, 0.233595159583083, -0.0169707335347365, -0.0024510969106639, -0.00133538177988052, -0.00107844949589918, -0.00118704160578944, -0.00220109226423557, 0.128117107050859, 0.0195208418036523, 0.0115904786384549, 0.0110085510610678, 0.0187033617242704, -0.424991963547792, -0.0705716060906837, -0.0492796092042717, -0.0722469351146286, 0.818994468586085, 0.159942793521877, 0.172395257095942, -1.04316900043789, -0.314457359864439, 1.0918990133138},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0087927090708986, 0.0180839093892028, 0.406799414567345, -0.146929444559864, 0.526496842949825, -1.09347628844525, 1.46007409911639, -1.33646288912419, 0.987009090127867, -0.0694601616527221, 0.240602121904116, -0.478804608828337, 0.603450004922122, -0.505268286600483, 0.306977302704001, -0.00247527129268345, -0.00114824513847678, -0.000858764763552668, -0.000810572121069985, -0.000949939770109126, -0.00162847451175851, 0.0201631387202039, 0.00977992505666882, 0.00785137380335901, 0.008444067791183, 0.0137227000166995, -0.0730276591671861, -0.0380220295914477, -0.0347803568705718, -0.0518708710671329, 0.155997190117277, 0.0925450728990586, 0.117391186136654, -0.224020808014578, -0.184292786273571, 0.260107308500107},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00940495437832305, 0.0380448638347133, 0.0129456047662751, 0.187763650165902, -0.419186504212878, 0.602030537374058, -0.544986219216521, 0.303426707344365, -0.0952613807854192, -0.0015457020946124, -0.000943963718433522, -0.000893895663951164, -0.00111710075866234, -0.00199665599129757, -0.0107809837635668, -0.0767083058178318, 0.276970850992037, -0.584055855246757, 0.806293017072708, -0.809348369920051, 1.05455597040804, 0.0133184391526004, -0.0522141369596153, 0.126365380883714, -0.231403133541958, 0.669340093966494, 0.00883132640500392, -0.0397356571322906, 0.127562497868832, -0.673130310092112, 0.00959792064238059, -0.0572841174236595, 0.529921876252884, 0.0159105531749605, -0.273638598761574, 0.0819466464178955},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011283240638805, -0.0188544332425243, 0.011547219698492, 0.295064434623245, -0.447189632841039, 0.591681610082053, -0.514654657963258, 0.279416818722859, -0.0861580586183823, -0.00943168755703904, -0.00234464757732831, -0.00158571154941749, -0.00159070456842585, -0.00237013457984159, -0.00975073658818302, -0.0843049468264094, 0.27387242501942, -0.505557199602691, 0.58305268817824, -0.443080792248772, 0.298484675140401, 0.0742787093747532, -0.261050064355969, 0.549325220444031, -0.826243677853533, 1.60331930673077, 0.0199763769301508, -0.0800313092003945, 0.219637637544496, -0.843571941003992, 0.0154009347841396, -0.0804695156812468, 0.563916732390121, 0.0201490014948128, -0.26882805258561, 0.0766608726472719},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0143003319812395, 0.00130297045014842, -0.00439389496144264, -0.0129165577253311, 0.326772886775826, -0.289387629599625, 0.223650044691118, -0.114073133196682, 0.0337705514004201, -0.0276003684898167, 0.00932563738090614, 0.00225784032626382, 0.00138738638481485, 0.00144425051069406, 0.00382190309790644, -0.0909002464561829, 0.241987282169665, -0.344686972704913, 0.274056461265552, -0.107354237558162, -0.00481435919399671, 0.184241600735625, -0.52751440682133, 0.847386108577654, -0.856012726582408, 0.730628667473463, -0.0669530688159953, 0.21618810860786, -0.44122744924838, 0.971177796005054, -0.0182809969576203, 0.0749971734901793, -0.333513146140757, -0.014272096860759, 0.127576341799983, -0.0323720518109698},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0174686241890843, -0.000465403488336229, 0.00225295454211709, 0.00413646705711257, -0.0189421963079385, 0.377292945035929, -0.157543173780247, 0.067711250262128, -0.0183385134526664, -0.0573309210233554, 0.0605739575993445, -0.0171487256939082, -0.00266313074382239, -0.00143680724775221, -0.00207541832955855, -0.086969946537975, 0.169020266588184, -0.154565455553942, 0.0574846864797374, 0.00112155569091886, 0.000710152097409098, 0.298388602481126, -0.619259025371126, 0.630491448768186, -0.289105832222494, -0.0105601025116403, -0.336666416296302, 0.777898816054542, -0.976490201295285, 0.838278150962803, 0.106115518471697, -0.302301385849418, 0.710440190713521, 0.0203178363695023, -0.108363070170095, 0.0205223025125213},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0190159034833559, 0.000973356784444456, -0.00150127135435963, -0.00828106404313106, 0.0326946825276981, -0.0868194179864455, 0.506286463248137, -0.0648833714027986, 0.0137636713744988, -0.0894934171512675, 0.161691687766998, -0.133141009501566, 0.0406093961418995, 0.0026700098053936, 0.0015576712870646, -0.0670681752507132, 0.0800295075559875, -0.0312027118994788, -0.00163202791073813, -0.000665915345546475, -0.000702349152075691, 0.328402463969079, -0.415383865609227, 0.177974133909416, 0.0111463864542099, 0.00751514487188397, -0.628944860598739, 0.874220240380372, -0.448507892101731, -0.0464150814640351, 0.569117305697112, -0.947222583895685, 0.802995470720638, -0.207854028192811, 0.571637244601805, -0.0225816977196436},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0170766261155938, -0.0019902450565573, 0.00018322781144544, 0.016573992432237, -0.0621025149754154, 0.141010282512097, -0.234817846211764, 0.711969237222367, -0.00229550757315027, -0.102961606182755, 0.257124698527092, -0.337811943545342, 0.240710935494929, -0.0797960856157467, -0.000259788695809636, -0.0371991617696025, 0.0187004957407525, 0.00161221093137425, 0.000689862224281284, 0.000506219500461186, 0.000677682858969579, 0.232332914196243, -0.122971758611374, -0.0115148481653328, -0.00575309472717426, -0.00635064230911914, -0.610877183966389, 0.351182316028281, 0.0383962027987862, 0.0288583307705499, 0.871704322266548, -0.585127809893801, -0.096237869211644, -0.725258497988564, 0.732342077008645, 0.361674770058887},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0113163607576261, 0.00244459347801201, -0.00147043437734156, -0.0201273753315641, 0.073621636857118, -0.158307468628364, 0.226199833492627, -0.247218257617761, 0.884554817400702, -0.0804526857721977, 0.245900934926361, -0.419528198446364, 0.43287558164716, -0.272343914583296, 0.100107420717141, -0.0121942700766043, -0.000688567149334434, -0.000321609418311553, -0.000232241492134705, -0.000227106059889247, -0.000345258140950958, 0.089482870586966, 0.00529106321232261, 0.0026594224753119, 0.00219948159309904, 0.00303198268350923, -0.286399393165856, -0.0182237211382529, -0.0104906739243829, -0.0122307717259138, 0.525817451503858, 0.0383196828610049, 0.0310960845532622, -0.621382287353624, -0.0638356455838533, 0.551100661239914},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00419482470538215, 0.0188020749954234, 0.406799414567345, -0.153895792551866, 0.556408957920232, -1.16876062678566, 1.58490607884513, -1.48646566070936, 1.1624309871152, -0.0329028675523176, 0.113000144935351, -0.222473029663854, 0.276387492673492, -0.226438945814256, 0.131555405716671, -0.00138091450265607, -0.000599807842467531, -0.000433133622419818, -0.000396812145152337, -0.00044990777262004, -0.000730972953038782, 0.0111527947944148, 0.00505420148370687, 0.00390347479753869, 0.00404479949375034, 0.00621498871030152, -0.0399624819397225, -0.019369141127516, -0.0169196646903393, -0.0237597669404017, 0.0841472432693772, 0.0461296716088445, 0.0546092934506974, -0.118239740897917, -0.0878433208703404, 0.131280739299055},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0137501289200363, 0.478646224257125, 0.0129456047662751, 0.564261658937412, -0.85225968886445, 0.972637415487376, -0.748017850187844, 0.367034077714178, -0.103936885792196, -0.00204303904989298, -0.00110338371652089, -0.000892734842534999, -0.000896493153717454, -0.00111867637279975, -0.0021054787567904, -0.110623167906397, 0.391613737263944, -0.800601644335545, 1.04539394481717, -0.921937268806356, 0.618915171491207, 0.016985464459362, -0.0630777716964558, 0.139190367774705, -0.209460871729458, 0.265768782876855, 0.00962308715226566, -0.0385733727930197, 0.0980958592801263, -0.21238511194028, 0.00840397231947226, -0.0388229051242303, 0.14204657334163, 0.00972611336402874, -0.0646431355842648, 0.0174612964295847},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0130724452826477, 0.0573466318111091, 0.0115472196984921, 1.09459087571854, -0.959600350861308, 0.973965459019146, -0.710871974320419, 0.338517169380733, -0.094004519196165, -0.00995918232739884, -0.00221143145035133, -0.00129469931920176, -0.00106358842486632, -0.00114460957150823, -0.00190427601040044, -0.0971270424547437, 0.312948138520667, -0.57015181975731, 0.641722637530174, -0.459162023935283, 0.216246690059208, 0.0764386635634838, -0.258224052114152, 0.507328309984258, -0.656822467526059, 0.671910094107585, 0.0177956674838559, -0.0648294224029631, 0.146509779718407, -0.271187758635749, 0.0112352821598048, -0.0470808083831585, 0.152118816549061, 0.0106167288015664, -0.0636055796787639, 0.0163349969810645},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011825738600673, -0.0126008532446808, -0.00439389496144264, 0.21715113166799, 0.834092126552661, -0.499665468155439, 0.313480194113943, -0.138672991396937, 0.0368460536169573, -0.0210809128006089, 0.0064675401884907, 0.00138477915020817, 0.000718468195384944, 0.000569935183155804, 0.00074640088136944, -0.075751706378628, 0.20401479695513, -0.296314755168379, 0.245047084198728, -0.108135959117464, 0.0158068841079712, 0.139412314688866, -0.393305599333347, 0.615081376497041, -0.583260456299225, 0.36421446274714, -0.0448033622091234, 0.136097590183693, -0.24405436417197, 0.32748438016152, -0.0103291081331109, 0.0359779445015892, -0.0912949062448065, -0.00614502353084458, 0.0302880372366744, -0.00689787828317701},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0100093864027661, 0.00308900434567163, 0.00225295454211707, -0.0332951985492174, 0.231854390775544, 0.754300698505447, -0.228433582910895, 0.0828869306578098, -0.0200086117019645, -0.0308518253866046, 0.0302104346034999, -0.007766470454013, -0.00105716416961846, -0.000463103648667661, -0.000405320080260483, -0.0510638995341277, 0.10318938664371, -0.101499672367412, 0.0456213297222869, -0.00442471729325545, -0.0011163384545591, 0.162370108978458, -0.343312337352019, 0.36290212309877, -0.186295502757192, 0.0252432691456125, -0.166358296622195, 0.378005642252973, -0.456360391057468, 0.327300330764809, 0.0459601751690616, -0.119273799932297, 0.201177939389621, 0.007145127435636, -0.0259059186797845, 0.004372918517755},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00771091076502105, -0.000843644498790287, -0.00150127135435965, 0.00782673830699745, -0.0351831931352398, 0.121095459563477, 0.82047170912204, -0.0807055787864037, 0.0150171363036925, -0.0346972847643066, 0.0593816512976127, -0.0456612976492789, 0.012691972753095, 0.000722256556864379, 0.000304206357870894, -0.0283709395014871, 0.0365582054300666, -0.0173418745476632, 0.000711444736713514, 0.000193845528593841, 0.000129640352780836, 0.131590279977387, -0.177196922901247, 0.0901419155215643, -0.00420555892961028, -0.00157938480981914, -0.235343281439288, 0.339854954079632, -0.196614716464869, 0.012643362172714, 0.194069469745413, -0.318713771258712, 0.254139904633156, -0.0613465170061721, 0.138861910930066, -0.00481173708750898},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00515876269448837, -0.000310977142728363, 0.000183227811445471, 0.00269519667886886, -0.0106459557057944, 0.026126708927164, -0.050431907537694, 0.935581938134159, -0.00250456067819403, -0.030246961586705, 0.0730339285435653, -0.0919724716705892, 0.0618991977460588, -0.0188001399423867, -5.07355907658352e-05, -0.0119231889842782, 0.00697998655835437, 9.42711953774865e-05, 3.28689240714438e-05, 2.04453162194981e-05, 2.15219837679697e-05, 0.0720019792098488, -0.0439955591317464, -0.000635948152897841, -0.000251139452738719, -0.000212610931903657, -0.18146362833716, 0.118670408725522, 0.00194286250136669, 0.0010442334554043, 0.2445745296261, -0.181155212175454, -0.00403657257935894, -0.186434013292297, 0.187943391387176, 0.077066123473736},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00272807288411639, 0.000228964365082621, -0.00147043437734149, -0.00191627313076468, 0.00715384968413744, -0.0158054035861901, 0.0235129244708145, -0.0278023274775159, 0.965111698729285, -0.0191268510321443, 0.0574900271389939, -0.0960454483499865, 0.0963516729570902, -0.0580884185907886, 0.0195505393885584, -0.00316309012265784, -1.81041961444211e-05, -7.65347657943503e-06, -5.16107499928375e-06, -4.70689967818974e-06, -6.41958072689552e-06, 0.0228257506849957, 0.000136225745874373, 6.15315526933391e-05, 4.68377899896164e-05, 5.75378368032897e-05, -0.07153861905536, -0.000456177484499373, -0.000232589247686307, -0.000238479206512432, 0.127697970618754, 0.000919166943443336, 0.000631266217376622, -0.144605088345566, -0.00140202688002908, 0.117429235107162},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000872818017150092, 0.0189862680714028, 0.406799414567345, -0.15610107426015, 0.567455617206899, -1.20021306161591, 1.64300121306148, -1.5642073459374, 1.26829420015707, -0.00681691044346847, 0.0232918598407978, -0.0455631809825608, 0.0561217395764407, -0.0453899894472437, 0.0256921926747958, -0.000312157272883358, -0.000130099835558637, -9.19587200981834e-05, -8.27428489658861e-05, -9.19750938476e-05, -0.000144801454748253, 0.00250819736339598, 0.00108925273390829, 0.000821671967709662, 0.000832604457127101, 0.00123785735700572, -0.00892980444797642, -0.00413868660890726, -0.00351588824624197, -0.00476504958696788, 0.0186425561037014, 0.00973035668755928, 0.0110558816866098, -0.0258598055383046, -0.0180526373492461, 0.0279734681600754}};
    
    // Reset values in the element tensor.
    A[0] = 0.0;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 18816
    for (unsigned int ip = 0; ip < 64; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      
      // Total number of operations to compute function values = 288
      for (unsigned int r = 0; r < 72; r++)
      {
        F0 += FE0_C0[ip][r]*w[0][r];
        F1 += FE0_C1[ip][r]*w[0][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 6
      // Number of operations to compute entry: 6
      A[0] += (F0*F0 + F1*F1)*W64[ip]*det;
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_081688551401288f138086b201f6c314aed48e94_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_081688551401288f138086b201f6c314aed48e94_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_081688551401288f138086b201f6c314aed48e94_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "1a55454635e47d1595fb98d22c946671940d3b11491f9173145c3c3c2a0a8bf7dcbdb7e450b71e1a8704c6e06914b2555102422bb8cf0916c51b17e85b295edd";
  }


  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 0;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 1;
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0});
    return position[i];
  }


  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_081688551401288f138086b201f6c314aed48e94_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_081688551401288f138086b201f6c314aed48e94_dofmap_1();
        break;
      }
    }
    
    return 0;
  }


  /// Return the number of cell domains
  virtual std::size_t max_cell_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t max_exterior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t max_interior_facet_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of vertex domains
  virtual std::size_t max_vertex_subdomain_id() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t max_custom_subdomain_id() const
  {
    return 0;
  }


  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any vertex integrals
  virtual bool has_vertex_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }


  /// Create a new cell integral on sub domain subdomain_id
  virtual ufc::cell_integral* create_cell_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain subdomain_id
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain subdomain_id
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new vertex integral on sub domain subdomain_id
  virtual ufc::vertex_integral* create_vertex_integral(std::size_t subdomain_id) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain subdomain_id
  virtual ufc::custom_integral* create_custom_integral(std::size_t subdomain_id) const
  {
    return 0;
  }


  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new ffc_form_081688551401288f138086b201f6c314aed48e94_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new vertex integral on everywhere else
  virtual ufc::vertex_integral* create_default_vertex_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
