#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <math.h>
#include <mpi.h>
#include "matrix.h"

int main(int argc, char *argv[]) {
    double **matrix_a, **matrix_b, **my_matrix_a, **my_matrix_b, **matrix_out; 
    int A_m, A_n, B_m, B_n;
    int rank, size;
    int my_Am, my_An, my_Bm, my_Bn;
    int i, j;
    int numbers[4];  //holds dimensions of matrices A and B, i.e. 4 ints
    MPI_Datatype MPImatrix_a, MPImatrix_b;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    /* Read matrices, only Master does this */
    double *sendMatrix_a = NULL, *sendMatrix_b = NULL, *recvMatrix = NULL;
    if (rank == 0) {
        read_matrix_binaryformat ("small_matrix_a.bin", &matrix_a, &A_m, &A_n);
        read_matrix_binaryformat ("small_matrix_b.bin", &matrix_b, &B_m, &B_n);
        /* NB! */
        allocate_array(&matrix_out, A_m, A_n); //Fix Dimensions 

        sendMatrix_a = &(matrix_a[0][0]);
        sendMatrix_b = &(matrix_b[0][0]);
        recvMatrix = &(matrix_out[0][0]);

        numbers[0] = A_m;
        numbers[1] = A_n;
        numbers[2] = B_m;
        numbers[3] = B_n;
    }

    // Broadcast matrix dimensions
    MPI_Bcast(&numbers, 4, MPI_INT, 0, MPI_COMM_WORLD); // 0 = master is root

    A_m = numbers[0];
    A_n = numbers[1];
    B_m = numbers[2];
    B_n = numbers[3];

    my_Am = A_m / (int)sqrt(size);
    my_An = A_n / (int)sqrt(size);
    my_Bm = B_m / (int)sqrt(size);
    my_Bn = B_n / (int)sqrt(size);

    if ( rank < A_m % size ) {
        ++my_Am;
    }
    if ( rank < A_n % size ) {
        printf("++An\n");
        printf("(An %d size) = %d\n", ((int)A_n % size));
        ++my_An;
    }
    if ( rank < B_n % size ) {
        ++my_Bn;
    }
    if ( rank < B_n % size ) {
        ++my_Bm;
    }
    printf("myAm = %d, myAn = %d, myBm = %d, myBn = %d\n", my_Am, my_An, my_Bm, my_Bn);
    

    allocate_array(&my_matrix_a, my_Am, my_An);
    allocate_array(&my_matrix_b, my_Bm, my_Bn);

    /* MPI_Datatype subarray used for purposes of scatterv */
    create_matrix_type(&MPImatrix_a, A_m, A_n, my_Am, my_An);
    create_matrix_type(&MPImatrix_b, B_m, B_n, my_Bn, my_Bm);

    int  displs[size], counts[size];
    if ( rank == 0 ) {
        /* How many pieces of data everyone has, in units of blocks */
        for ( i = 0; i < size; ++i ) {
            counts[i] = 1;
        }

        /* Starting point of everyone's data in matrix_a in block size */
        for ( i = 0; i < size; ++i ) {
            j = i%(int)sqrt(size);
            displs[i] = i/(int)sqrt(size) == 0 ? j : j + (i/(int)sqrt(size) + 1)*my_Am;
            printf("disp[i] = %d\n", displs[i]);
        }
    }
    //if ( rank == 0 ) {
    //    for ( i = 0; i < my_Am; ++i ) {
    //        for ( j = 0; j < my_An; ++j ) {
    //            printf("%.1f ", matrix_a[i][j]);
    //        }
    //        printf("\n");
    //    }
    //}

    /* Only MASTER knows matrices A and B */
    MPI_Scatterv(sendMatrix_a, counts, displs, MPImatrix_a, &(my_matrix_a[0][0]), my_Am*my_An,\
             MPI_DOUBLE, 0, MPI_COMM_WORLD);
    MPI_Scatterv(sendMatrix_b, counts, displs, MPImatrix_b, &(my_matrix_b[0][0]), my_Bm*my_Bn,\
             MPI_DOUBLE, 0, MPI_COMM_WORLD);

    for ( i = 0; i < my_Am; ++i ) {
        for ( j = 0; j < my_An; ++j ) {
            my_matrix_a[i][j] = rank;
        }
    }
    MPI_Barrier(MPI_COMM_WORLD);

    MPI_Gatherv(&(my_matrix_a[0][0]), my_Am*my_An, MPI_DOUBLE, recvMatrix, counts, displs, \
            MPImatrix_a, 0, MPI_COMM_WORLD);

    //if (rank == 0) {
    //    for ( i = 0; i < A_m; ++i ) {
    //        for ( j = 0; j < A_n; ++j ) {
    //            printf("%.1f ", recvMatrix[j + i*A_n]);
    //        }
    //        printf("\n");
    //    }
    //}

    //write_matrix_binaryformat ("small_matrix_out.bin", matrix_out, num_rows_a, num_cols_b);

    MPI_Finalize();
    return 0;
}
